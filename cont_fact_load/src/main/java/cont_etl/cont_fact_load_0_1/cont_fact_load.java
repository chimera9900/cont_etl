// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package cont_etl.cont_fact_load_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: cont_fact_load Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class cont_fact_load implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(mysql_AdditionalParams != null){
				
					this.setProperty("mysql_AdditionalParams", mysql_AdditionalParams.toString());
				
			}
			
			if(mysql_Login != null){
				
					this.setProperty("mysql_Login", mysql_Login.toString());
				
			}
			
			if(mysql_Server != null){
				
					this.setProperty("mysql_Server", mysql_Server.toString());
				
			}
			
			if(mysql_Port != null){
				
					this.setProperty("mysql_Port", mysql_Port.toString());
				
			}
			
			if(mysql_Database != null){
				
					this.setProperty("mysql_Database", mysql_Database.toString());
				
			}
			
			if(mysql_Password != null){
				
					this.setProperty("mysql_Password", mysql_Password.toString());
				
			}
			
		}

public String mysql_AdditionalParams;
public String getMysql_AdditionalParams(){
	return this.mysql_AdditionalParams;
}
public String mysql_Login;
public String getMysql_Login(){
	return this.mysql_Login;
}
public String mysql_Server;
public String getMysql_Server(){
	return this.mysql_Server;
}
public String mysql_Port;
public String getMysql_Port(){
	return this.mysql_Port;
}
public String mysql_Database;
public String getMysql_Database(){
	return this.mysql_Database;
}
public java.lang.String mysql_Password;
public java.lang.String getMysql_Password(){
	return this.mysql_Password;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "cont_fact_load";
	private final String projectName = "CONT_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				cont_fact_load.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(cont_fact_load.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String contract_type;

				public String getContract_type () {
					return this.contract_type;
				}
				
			    public java.util.Date issue_date;

				public java.util.Date getIssue_date () {
					return this.issue_date;
				}
				
			    public String contract_status;

				public String getContract_status () {
					return this.contract_status;
				}
				
			    public String inventory_status;

				public String getInventory_status () {
					return this.inventory_status;
				}
				
			    public String contract_ref_no;

				public String getContract_ref_no () {
					return this.contract_ref_no;
				}
				
			    public String cp_ref;

				public String getCp_ref () {
					return this.cp_ref;
				}
				
			    public String allocated_contract;

				public String getAllocated_contract () {
					return this.allocated_contract;
				}
				
			    public Integer crop_year;

				public Integer getCrop_year () {
					return this.crop_year;
				}
				
			    public Float quantity;

				public Float getQuantity () {
					return this.quantity;
				}
				
			    public String quantity_unit;

				public String getQuantity_unit () {
					return this.quantity_unit;
				}
				
			    public java.util.Date shipment_start_date;

				public java.util.Date getShipment_start_date () {
					return this.shipment_start_date;
				}
				
			    public java.util.Date shipment_end_date;

				public java.util.Date getShipment_end_date () {
					return this.shipment_end_date;
				}
				
			    public String exchange;

				public String getExchange () {
					return this.exchange;
				}
				
			    public String month;

				public String getMonth () {
					return this.month;
				}
				
			    public String price;

				public String getPrice () {
					return this.price;
				}
				
			    public String price_units;

				public String getPrice_units () {
					return this.price_units;
				}
				
			    public String inco_terms;

				public String getInco_terms () {
					return this.inco_terms;
				}
				
			    public String boker_ref_no;

				public String getBoker_ref_no () {
					return this.boker_ref_no;
				}
				
			    public String commission;

				public String getCommission () {
					return this.commission;
				}
				
			    public String sample;

				public String getSample () {
					return this.sample;
				}
				
			    public java.util.Date etl_load_date;

				public java.util.Date getEtl_load_date () {
					return this.etl_load_date;
				}
				
			    public int product_key;

				public int getProduct_key () {
					return this.product_key;
				}
				
			    public int prod_quality_key;

				public int getProd_quality_key () {
					return this.prod_quality_key;
				}
				
			    public int cp_key;

				public int getCp_key () {
					return this.cp_key;
				}
				
			    public int broker_key;

				public int getBroker_key () {
					return this.broker_key;
				}
				
			    public int profit_center_key;

				public int getProfit_center_key () {
					return this.profit_center_key;
				}
				
			    public int country_key;

				public int getCountry_key () {
					return this.country_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.product_key;
						
							result = prime * result + (int) this.prod_quality_key;
						
							result = prime * result + (int) this.cp_key;
						
							result = prime * result + (int) this.broker_key;
						
							result = prime * result + (int) this.profit_center_key;
						
							result = prime * result + (int) this.country_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.product_key != other.product_key)
							return false;
					
						if (this.prod_quality_key != other.prod_quality_key)
							return false;
					
						if (this.cp_key != other.cp_key)
							return false;
					
						if (this.broker_key != other.broker_key)
							return false;
					
						if (this.profit_center_key != other.profit_center_key)
							return false;
					
						if (this.country_key != other.country_key)
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.contract_type = this.contract_type;
	            other.issue_date = this.issue_date;
	            other.contract_status = this.contract_status;
	            other.inventory_status = this.inventory_status;
	            other.contract_ref_no = this.contract_ref_no;
	            other.cp_ref = this.cp_ref;
	            other.allocated_contract = this.allocated_contract;
	            other.crop_year = this.crop_year;
	            other.quantity = this.quantity;
	            other.quantity_unit = this.quantity_unit;
	            other.shipment_start_date = this.shipment_start_date;
	            other.shipment_end_date = this.shipment_end_date;
	            other.exchange = this.exchange;
	            other.month = this.month;
	            other.price = this.price;
	            other.price_units = this.price_units;
	            other.inco_terms = this.inco_terms;
	            other.boker_ref_no = this.boker_ref_no;
	            other.commission = this.commission;
	            other.sample = this.sample;
	            other.etl_load_date = this.etl_load_date;
	            other.product_key = this.product_key;
	            other.prod_quality_key = this.prod_quality_key;
	            other.cp_key = this.cp_key;
	            other.broker_key = this.broker_key;
	            other.profit_center_key = this.profit_center_key;
	            other.country_key = this.country_key;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.product_key = this.product_key;
	            	other.prod_quality_key = this.prod_quality_key;
	            	other.cp_key = this.cp_key;
	            	other.broker_key = this.broker_key;
	            	other.profit_center_key = this.profit_center_key;
	            	other.country_key = this.country_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.contract_type = readString(dis);
					
					this.issue_date = readDate(dis);
					
					this.contract_status = readString(dis);
					
					this.inventory_status = readString(dis);
					
					this.contract_ref_no = readString(dis);
					
					this.cp_ref = readString(dis);
					
					this.allocated_contract = readString(dis);
					
						this.crop_year = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantity = null;
           				} else {
           			    	this.quantity = dis.readFloat();
           				}
					
					this.quantity_unit = readString(dis);
					
					this.shipment_start_date = readDate(dis);
					
					this.shipment_end_date = readDate(dis);
					
					this.exchange = readString(dis);
					
					this.month = readString(dis);
					
					this.price = readString(dis);
					
					this.price_units = readString(dis);
					
					this.inco_terms = readString(dis);
					
					this.boker_ref_no = readString(dis);
					
					this.commission = readString(dis);
					
					this.sample = readString(dis);
					
					this.etl_load_date = readDate(dis);
					
			        this.product_key = dis.readInt();
					
			        this.prod_quality_key = dis.readInt();
					
			        this.cp_key = dis.readInt();
					
			        this.broker_key = dis.readInt();
					
			        this.profit_center_key = dis.readInt();
					
			        this.country_key = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.contract_type,dos);
					
					// java.util.Date
				
						writeDate(this.issue_date,dos);
					
					// String
				
						writeString(this.contract_status,dos);
					
					// String
				
						writeString(this.inventory_status,dos);
					
					// String
				
						writeString(this.contract_ref_no,dos);
					
					// String
				
						writeString(this.cp_ref,dos);
					
					// String
				
						writeString(this.allocated_contract,dos);
					
					// Integer
				
						writeInteger(this.crop_year,dos);
					
					// Float
				
						if(this.quantity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantity);
		            	}
					
					// String
				
						writeString(this.quantity_unit,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_end_date,dos);
					
					// String
				
						writeString(this.exchange,dos);
					
					// String
				
						writeString(this.month,dos);
					
					// String
				
						writeString(this.price,dos);
					
					// String
				
						writeString(this.price_units,dos);
					
					// String
				
						writeString(this.inco_terms,dos);
					
					// String
				
						writeString(this.boker_ref_no,dos);
					
					// String
				
						writeString(this.commission,dos);
					
					// String
				
						writeString(this.sample,dos);
					
					// java.util.Date
				
						writeDate(this.etl_load_date,dos);
					
					// int
				
		            	dos.writeInt(this.product_key);
					
					// int
				
		            	dos.writeInt(this.prod_quality_key);
					
					// int
				
		            	dos.writeInt(this.cp_key);
					
					// int
				
		            	dos.writeInt(this.broker_key);
					
					// int
				
		            	dos.writeInt(this.profit_center_key);
					
					// int
				
		            	dos.writeInt(this.country_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contract_type="+contract_type);
		sb.append(",issue_date="+String.valueOf(issue_date));
		sb.append(",contract_status="+contract_status);
		sb.append(",inventory_status="+inventory_status);
		sb.append(",contract_ref_no="+contract_ref_no);
		sb.append(",cp_ref="+cp_ref);
		sb.append(",allocated_contract="+allocated_contract);
		sb.append(",crop_year="+String.valueOf(crop_year));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",quantity_unit="+quantity_unit);
		sb.append(",shipment_start_date="+String.valueOf(shipment_start_date));
		sb.append(",shipment_end_date="+String.valueOf(shipment_end_date));
		sb.append(",exchange="+exchange);
		sb.append(",month="+month);
		sb.append(",price="+price);
		sb.append(",price_units="+price_units);
		sb.append(",inco_terms="+inco_terms);
		sb.append(",boker_ref_no="+boker_ref_no);
		sb.append(",commission="+commission);
		sb.append(",sample="+sample);
		sb.append(",etl_load_date="+String.valueOf(etl_load_date));
		sb.append(",product_key="+String.valueOf(product_key));
		sb.append(",prod_quality_key="+String.valueOf(prod_quality_key));
		sb.append(",cp_key="+String.valueOf(cp_key));
		sb.append(",broker_key="+String.valueOf(broker_key));
		sb.append(",profit_center_key="+String.valueOf(profit_center_key));
		sb.append(",country_key="+String.valueOf(country_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.product_key, other.product_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.prod_quality_key, other.prod_quality_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cp_key, other.cp_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.broker_key, other.broker_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.profit_center_key, other.profit_center_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.country_key, other.country_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String profit_center;

				public String getProfit_center () {
					return this.profit_center;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String contract_type;

				public String getContract_type () {
					return this.contract_type;
				}
				
			    public java.util.Date issue_date;

				public java.util.Date getIssue_date () {
					return this.issue_date;
				}
				
			    public String contract_status;

				public String getContract_status () {
					return this.contract_status;
				}
				
			    public String inventory_status;

				public String getInventory_status () {
					return this.inventory_status;
				}
				
			    public String contract_ref_no;

				public String getContract_ref_no () {
					return this.contract_ref_no;
				}
				
			    public String cp_ref;

				public String getCp_ref () {
					return this.cp_ref;
				}
				
			    public String cp_name;

				public String getCp_name () {
					return this.cp_name;
				}
				
			    public String allocated_contract;

				public String getAllocated_contract () {
					return this.allocated_contract;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String quality;

				public String getQuality () {
					return this.quality;
				}
				
			    public Integer crop_year;

				public Integer getCrop_year () {
					return this.crop_year;
				}
				
			    public Float quantity;

				public Float getQuantity () {
					return this.quantity;
				}
				
			    public String quantity_unit;

				public String getQuantity_unit () {
					return this.quantity_unit;
				}
				
			    public java.util.Date shipment_start_date;

				public java.util.Date getShipment_start_date () {
					return this.shipment_start_date;
				}
				
			    public java.util.Date shipment_end_date;

				public java.util.Date getShipment_end_date () {
					return this.shipment_end_date;
				}
				
			    public String exchange;

				public String getExchange () {
					return this.exchange;
				}
				
			    public String month;

				public String getMonth () {
					return this.month;
				}
				
			    public String price;

				public String getPrice () {
					return this.price;
				}
				
			    public String price_units;

				public String getPrice_units () {
					return this.price_units;
				}
				
			    public String inco_terms;

				public String getInco_terms () {
					return this.inco_terms;
				}
				
			    public String broker;

				public String getBroker () {
					return this.broker;
				}
				
			    public String boker_ref_no;

				public String getBoker_ref_no () {
					return this.boker_ref_no;
				}
				
			    public String commission;

				public String getCommission () {
					return this.commission;
				}
				
			    public String sample;

				public String getSample () {
					return this.sample;
				}
				
			    public java.util.Date etl_load_date;

				public java.util.Date getEtl_load_date () {
					return this.etl_load_date;
				}
				
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				
			    public Integer prod_quality_key;

				public Integer getProd_quality_key () {
					return this.prod_quality_key;
				}
				
			    public Integer cp_key;

				public Integer getCp_key () {
					return this.cp_key;
				}
				
			    public Integer broker_key;

				public Integer getBroker_key () {
					return this.broker_key;
				}
				
			    public Integer profit_center_key;

				public Integer getProfit_center_key () {
					return this.profit_center_key;
				}
				
			    public Integer country_key;

				public Integer getCountry_key () {
					return this.country_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.product_key == null) ? 0 : this.product_key.hashCode());
					
						result = prime * result + ((this.prod_quality_key == null) ? 0 : this.prod_quality_key.hashCode());
					
						result = prime * result + ((this.cp_key == null) ? 0 : this.cp_key.hashCode());
					
						result = prime * result + ((this.broker_key == null) ? 0 : this.broker_key.hashCode());
					
						result = prime * result + ((this.profit_center_key == null) ? 0 : this.profit_center_key.hashCode());
					
						result = prime * result + ((this.country_key == null) ? 0 : this.country_key.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out2Struct other = (out2Struct) obj;
		
						if (this.product_key == null) {
							if (other.product_key != null)
								return false;
						
						} else if (!this.product_key.equals(other.product_key))
						
							return false;
					
						if (this.prod_quality_key == null) {
							if (other.prod_quality_key != null)
								return false;
						
						} else if (!this.prod_quality_key.equals(other.prod_quality_key))
						
							return false;
					
						if (this.cp_key == null) {
							if (other.cp_key != null)
								return false;
						
						} else if (!this.cp_key.equals(other.cp_key))
						
							return false;
					
						if (this.broker_key == null) {
							if (other.broker_key != null)
								return false;
						
						} else if (!this.broker_key.equals(other.broker_key))
						
							return false;
					
						if (this.profit_center_key == null) {
							if (other.profit_center_key != null)
								return false;
						
						} else if (!this.profit_center_key.equals(other.profit_center_key))
						
							return false;
					
						if (this.country_key == null) {
							if (other.country_key != null)
								return false;
						
						} else if (!this.country_key.equals(other.country_key))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out2Struct other) {

		other.profit_center = this.profit_center;
	            other.product_name = this.product_name;
	            other.contract_type = this.contract_type;
	            other.issue_date = this.issue_date;
	            other.contract_status = this.contract_status;
	            other.inventory_status = this.inventory_status;
	            other.contract_ref_no = this.contract_ref_no;
	            other.cp_ref = this.cp_ref;
	            other.cp_name = this.cp_name;
	            other.allocated_contract = this.allocated_contract;
	            other.origin = this.origin;
	            other.quality = this.quality;
	            other.crop_year = this.crop_year;
	            other.quantity = this.quantity;
	            other.quantity_unit = this.quantity_unit;
	            other.shipment_start_date = this.shipment_start_date;
	            other.shipment_end_date = this.shipment_end_date;
	            other.exchange = this.exchange;
	            other.month = this.month;
	            other.price = this.price;
	            other.price_units = this.price_units;
	            other.inco_terms = this.inco_terms;
	            other.broker = this.broker;
	            other.boker_ref_no = this.boker_ref_no;
	            other.commission = this.commission;
	            other.sample = this.sample;
	            other.etl_load_date = this.etl_load_date;
	            other.product_key = this.product_key;
	            other.prod_quality_key = this.prod_quality_key;
	            other.cp_key = this.cp_key;
	            other.broker_key = this.broker_key;
	            other.profit_center_key = this.profit_center_key;
	            other.country_key = this.country_key;
	            
	}

	public void copyKeysDataTo(out2Struct other) {

		other.product_key = this.product_key;
	            	other.prod_quality_key = this.prod_quality_key;
	            	other.cp_key = this.cp_key;
	            	other.broker_key = this.broker_key;
	            	other.profit_center_key = this.profit_center_key;
	            	other.country_key = this.country_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.profit_center = readString(dis);
					
					this.product_name = readString(dis);
					
					this.contract_type = readString(dis);
					
					this.issue_date = readDate(dis);
					
					this.contract_status = readString(dis);
					
					this.inventory_status = readString(dis);
					
					this.contract_ref_no = readString(dis);
					
					this.cp_ref = readString(dis);
					
					this.cp_name = readString(dis);
					
					this.allocated_contract = readString(dis);
					
					this.origin = readString(dis);
					
					this.quality = readString(dis);
					
						this.crop_year = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantity = null;
           				} else {
           			    	this.quantity = dis.readFloat();
           				}
					
					this.quantity_unit = readString(dis);
					
					this.shipment_start_date = readDate(dis);
					
					this.shipment_end_date = readDate(dis);
					
					this.exchange = readString(dis);
					
					this.month = readString(dis);
					
					this.price = readString(dis);
					
					this.price_units = readString(dis);
					
					this.inco_terms = readString(dis);
					
					this.broker = readString(dis);
					
					this.boker_ref_no = readString(dis);
					
					this.commission = readString(dis);
					
					this.sample = readString(dis);
					
					this.etl_load_date = readDate(dis);
					
						this.product_key = readInteger(dis);
					
						this.prod_quality_key = readInteger(dis);
					
						this.cp_key = readInteger(dis);
					
						this.broker_key = readInteger(dis);
					
						this.profit_center_key = readInteger(dis);
					
						this.country_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.profit_center,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.contract_type,dos);
					
					// java.util.Date
				
						writeDate(this.issue_date,dos);
					
					// String
				
						writeString(this.contract_status,dos);
					
					// String
				
						writeString(this.inventory_status,dos);
					
					// String
				
						writeString(this.contract_ref_no,dos);
					
					// String
				
						writeString(this.cp_ref,dos);
					
					// String
				
						writeString(this.cp_name,dos);
					
					// String
				
						writeString(this.allocated_contract,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.quality,dos);
					
					// Integer
				
						writeInteger(this.crop_year,dos);
					
					// Float
				
						if(this.quantity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantity);
		            	}
					
					// String
				
						writeString(this.quantity_unit,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_end_date,dos);
					
					// String
				
						writeString(this.exchange,dos);
					
					// String
				
						writeString(this.month,dos);
					
					// String
				
						writeString(this.price,dos);
					
					// String
				
						writeString(this.price_units,dos);
					
					// String
				
						writeString(this.inco_terms,dos);
					
					// String
				
						writeString(this.broker,dos);
					
					// String
				
						writeString(this.boker_ref_no,dos);
					
					// String
				
						writeString(this.commission,dos);
					
					// String
				
						writeString(this.sample,dos);
					
					// java.util.Date
				
						writeDate(this.etl_load_date,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// Integer
				
						writeInteger(this.prod_quality_key,dos);
					
					// Integer
				
						writeInteger(this.cp_key,dos);
					
					// Integer
				
						writeInteger(this.broker_key,dos);
					
					// Integer
				
						writeInteger(this.profit_center_key,dos);
					
					// Integer
				
						writeInteger(this.country_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("profit_center="+profit_center);
		sb.append(",product_name="+product_name);
		sb.append(",contract_type="+contract_type);
		sb.append(",issue_date="+String.valueOf(issue_date));
		sb.append(",contract_status="+contract_status);
		sb.append(",inventory_status="+inventory_status);
		sb.append(",contract_ref_no="+contract_ref_no);
		sb.append(",cp_ref="+cp_ref);
		sb.append(",cp_name="+cp_name);
		sb.append(",allocated_contract="+allocated_contract);
		sb.append(",origin="+origin);
		sb.append(",quality="+quality);
		sb.append(",crop_year="+String.valueOf(crop_year));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",quantity_unit="+quantity_unit);
		sb.append(",shipment_start_date="+String.valueOf(shipment_start_date));
		sb.append(",shipment_end_date="+String.valueOf(shipment_end_date));
		sb.append(",exchange="+exchange);
		sb.append(",month="+month);
		sb.append(",price="+price);
		sb.append(",price_units="+price_units);
		sb.append(",inco_terms="+inco_terms);
		sb.append(",broker="+broker);
		sb.append(",boker_ref_no="+boker_ref_no);
		sb.append(",commission="+commission);
		sb.append(",sample="+sample);
		sb.append(",etl_load_date="+String.valueOf(etl_load_date));
		sb.append(",product_key="+String.valueOf(product_key));
		sb.append(",prod_quality_key="+String.valueOf(prod_quality_key));
		sb.append(",cp_key="+String.valueOf(cp_key));
		sb.append(",broker_key="+String.valueOf(broker_key));
		sb.append(",profit_center_key="+String.valueOf(profit_center_key));
		sb.append(",country_key="+String.valueOf(country_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.product_key, other.product_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.prod_quality_key, other.prod_quality_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cp_key, other.cp_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.broker_key, other.broker_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.profit_center_key, other.profit_center_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.country_key, other.country_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];

	
			    public String profit_center;

				public String getProfit_center () {
					return this.profit_center;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String contract_type;

				public String getContract_type () {
					return this.contract_type;
				}
				
			    public java.util.Date issue_date;

				public java.util.Date getIssue_date () {
					return this.issue_date;
				}
				
			    public String contract_status;

				public String getContract_status () {
					return this.contract_status;
				}
				
			    public String inventory_status;

				public String getInventory_status () {
					return this.inventory_status;
				}
				
			    public String contract_ref_no;

				public String getContract_ref_no () {
					return this.contract_ref_no;
				}
				
			    public String cp_ref;

				public String getCp_ref () {
					return this.cp_ref;
				}
				
			    public String cp_name;

				public String getCp_name () {
					return this.cp_name;
				}
				
			    public String allocated_contract;

				public String getAllocated_contract () {
					return this.allocated_contract;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String quality;

				public String getQuality () {
					return this.quality;
				}
				
			    public Integer crop_year;

				public Integer getCrop_year () {
					return this.crop_year;
				}
				
			    public Float quantity;

				public Float getQuantity () {
					return this.quantity;
				}
				
			    public String quantity_unit;

				public String getQuantity_unit () {
					return this.quantity_unit;
				}
				
			    public java.util.Date shipment_start_date;

				public java.util.Date getShipment_start_date () {
					return this.shipment_start_date;
				}
				
			    public java.util.Date shipment_end_date;

				public java.util.Date getShipment_end_date () {
					return this.shipment_end_date;
				}
				
			    public String exchange;

				public String getExchange () {
					return this.exchange;
				}
				
			    public String month;

				public String getMonth () {
					return this.month;
				}
				
			    public String price;

				public String getPrice () {
					return this.price;
				}
				
			    public String price_units;

				public String getPrice_units () {
					return this.price_units;
				}
				
			    public String inco_terms;

				public String getInco_terms () {
					return this.inco_terms;
				}
				
			    public String broker;

				public String getBroker () {
					return this.broker;
				}
				
			    public String boker_ref_no;

				public String getBoker_ref_no () {
					return this.boker_ref_no;
				}
				
			    public String commission;

				public String getCommission () {
					return this.commission;
				}
				
			    public String sample;

				public String getSample () {
					return this.sample;
				}
				
			    public java.util.Date etl_load_date;

				public java.util.Date getEtl_load_date () {
					return this.etl_load_date;
				}
				
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				
			    public Integer prod_quality_key;

				public Integer getProd_quality_key () {
					return this.prod_quality_key;
				}
				
			    public Integer cp_key;

				public Integer getCp_key () {
					return this.cp_key;
				}
				
			    public Integer broker_key;

				public Integer getBroker_key () {
					return this.broker_key;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.profit_center = readString(dis);
					
					this.product_name = readString(dis);
					
					this.contract_type = readString(dis);
					
					this.issue_date = readDate(dis);
					
					this.contract_status = readString(dis);
					
					this.inventory_status = readString(dis);
					
					this.contract_ref_no = readString(dis);
					
					this.cp_ref = readString(dis);
					
					this.cp_name = readString(dis);
					
					this.allocated_contract = readString(dis);
					
					this.origin = readString(dis);
					
					this.quality = readString(dis);
					
						this.crop_year = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantity = null;
           				} else {
           			    	this.quantity = dis.readFloat();
           				}
					
					this.quantity_unit = readString(dis);
					
					this.shipment_start_date = readDate(dis);
					
					this.shipment_end_date = readDate(dis);
					
					this.exchange = readString(dis);
					
					this.month = readString(dis);
					
					this.price = readString(dis);
					
					this.price_units = readString(dis);
					
					this.inco_terms = readString(dis);
					
					this.broker = readString(dis);
					
					this.boker_ref_no = readString(dis);
					
					this.commission = readString(dis);
					
					this.sample = readString(dis);
					
					this.etl_load_date = readDate(dis);
					
						this.product_key = readInteger(dis);
					
						this.prod_quality_key = readInteger(dis);
					
						this.cp_key = readInteger(dis);
					
						this.broker_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.profit_center,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.contract_type,dos);
					
					// java.util.Date
				
						writeDate(this.issue_date,dos);
					
					// String
				
						writeString(this.contract_status,dos);
					
					// String
				
						writeString(this.inventory_status,dos);
					
					// String
				
						writeString(this.contract_ref_no,dos);
					
					// String
				
						writeString(this.cp_ref,dos);
					
					// String
				
						writeString(this.cp_name,dos);
					
					// String
				
						writeString(this.allocated_contract,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.quality,dos);
					
					// Integer
				
						writeInteger(this.crop_year,dos);
					
					// Float
				
						if(this.quantity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantity);
		            	}
					
					// String
				
						writeString(this.quantity_unit,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_end_date,dos);
					
					// String
				
						writeString(this.exchange,dos);
					
					// String
				
						writeString(this.month,dos);
					
					// String
				
						writeString(this.price,dos);
					
					// String
				
						writeString(this.price_units,dos);
					
					// String
				
						writeString(this.inco_terms,dos);
					
					// String
				
						writeString(this.broker,dos);
					
					// String
				
						writeString(this.boker_ref_no,dos);
					
					// String
				
						writeString(this.commission,dos);
					
					// String
				
						writeString(this.sample,dos);
					
					// java.util.Date
				
						writeDate(this.etl_load_date,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// Integer
				
						writeInteger(this.prod_quality_key,dos);
					
					// Integer
				
						writeInteger(this.cp_key,dos);
					
					// Integer
				
						writeInteger(this.broker_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("profit_center="+profit_center);
		sb.append(",product_name="+product_name);
		sb.append(",contract_type="+contract_type);
		sb.append(",issue_date="+String.valueOf(issue_date));
		sb.append(",contract_status="+contract_status);
		sb.append(",inventory_status="+inventory_status);
		sb.append(",contract_ref_no="+contract_ref_no);
		sb.append(",cp_ref="+cp_ref);
		sb.append(",cp_name="+cp_name);
		sb.append(",allocated_contract="+allocated_contract);
		sb.append(",origin="+origin);
		sb.append(",quality="+quality);
		sb.append(",crop_year="+String.valueOf(crop_year));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",quantity_unit="+quantity_unit);
		sb.append(",shipment_start_date="+String.valueOf(shipment_start_date));
		sb.append(",shipment_end_date="+String.valueOf(shipment_end_date));
		sb.append(",exchange="+exchange);
		sb.append(",month="+month);
		sb.append(",price="+price);
		sb.append(",price_units="+price_units);
		sb.append(",inco_terms="+inco_terms);
		sb.append(",broker="+broker);
		sb.append(",boker_ref_no="+boker_ref_no);
		sb.append(",commission="+commission);
		sb.append(",sample="+sample);
		sb.append(",etl_load_date="+String.valueOf(etl_load_date));
		sb.append(",product_key="+String.valueOf(product_key));
		sb.append(",prod_quality_key="+String.valueOf(prod_quality_key));
		sb.append(",cp_key="+String.valueOf(cp_key));
		sb.append(",broker_key="+String.valueOf(broker_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];

	
			    public String profit_center;

				public String getProfit_center () {
					return this.profit_center;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String contract_type;

				public String getContract_type () {
					return this.contract_type;
				}
				
			    public java.util.Date issue_date;

				public java.util.Date getIssue_date () {
					return this.issue_date;
				}
				
			    public String contract_status;

				public String getContract_status () {
					return this.contract_status;
				}
				
			    public String inventory_status;

				public String getInventory_status () {
					return this.inventory_status;
				}
				
			    public String contract_ref_no;

				public String getContract_ref_no () {
					return this.contract_ref_no;
				}
				
			    public String cp_ref;

				public String getCp_ref () {
					return this.cp_ref;
				}
				
			    public String cp_name;

				public String getCp_name () {
					return this.cp_name;
				}
				
			    public String allocated_contract;

				public String getAllocated_contract () {
					return this.allocated_contract;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String quality;

				public String getQuality () {
					return this.quality;
				}
				
			    public Integer crop_year;

				public Integer getCrop_year () {
					return this.crop_year;
				}
				
			    public Float quantity;

				public Float getQuantity () {
					return this.quantity;
				}
				
			    public String quantity_unit;

				public String getQuantity_unit () {
					return this.quantity_unit;
				}
				
			    public java.util.Date shipment_start_date;

				public java.util.Date getShipment_start_date () {
					return this.shipment_start_date;
				}
				
			    public java.util.Date shipment_end_date;

				public java.util.Date getShipment_end_date () {
					return this.shipment_end_date;
				}
				
			    public String exchange;

				public String getExchange () {
					return this.exchange;
				}
				
			    public String month;

				public String getMonth () {
					return this.month;
				}
				
			    public String price;

				public String getPrice () {
					return this.price;
				}
				
			    public String price_units;

				public String getPrice_units () {
					return this.price_units;
				}
				
			    public String inco_terms;

				public String getInco_terms () {
					return this.inco_terms;
				}
				
			    public String broker;

				public String getBroker () {
					return this.broker;
				}
				
			    public String boker_ref_no;

				public String getBoker_ref_no () {
					return this.boker_ref_no;
				}
				
			    public String commission;

				public String getCommission () {
					return this.commission;
				}
				
			    public String sample;

				public String getSample () {
					return this.sample;
				}
				
			    public java.util.Date etl_load_date;

				public java.util.Date getEtl_load_date () {
					return this.etl_load_date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.profit_center = readString(dis);
					
					this.product_name = readString(dis);
					
					this.contract_type = readString(dis);
					
					this.issue_date = readDate(dis);
					
					this.contract_status = readString(dis);
					
					this.inventory_status = readString(dis);
					
					this.contract_ref_no = readString(dis);
					
					this.cp_ref = readString(dis);
					
					this.cp_name = readString(dis);
					
					this.allocated_contract = readString(dis);
					
					this.origin = readString(dis);
					
					this.quality = readString(dis);
					
						this.crop_year = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantity = null;
           				} else {
           			    	this.quantity = dis.readFloat();
           				}
					
					this.quantity_unit = readString(dis);
					
					this.shipment_start_date = readDate(dis);
					
					this.shipment_end_date = readDate(dis);
					
					this.exchange = readString(dis);
					
					this.month = readString(dis);
					
					this.price = readString(dis);
					
					this.price_units = readString(dis);
					
					this.inco_terms = readString(dis);
					
					this.broker = readString(dis);
					
					this.boker_ref_no = readString(dis);
					
					this.commission = readString(dis);
					
					this.sample = readString(dis);
					
					this.etl_load_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.profit_center,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.contract_type,dos);
					
					// java.util.Date
				
						writeDate(this.issue_date,dos);
					
					// String
				
						writeString(this.contract_status,dos);
					
					// String
				
						writeString(this.inventory_status,dos);
					
					// String
				
						writeString(this.contract_ref_no,dos);
					
					// String
				
						writeString(this.cp_ref,dos);
					
					// String
				
						writeString(this.cp_name,dos);
					
					// String
				
						writeString(this.allocated_contract,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.quality,dos);
					
					// Integer
				
						writeInteger(this.crop_year,dos);
					
					// Float
				
						if(this.quantity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantity);
		            	}
					
					// String
				
						writeString(this.quantity_unit,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_end_date,dos);
					
					// String
				
						writeString(this.exchange,dos);
					
					// String
				
						writeString(this.month,dos);
					
					// String
				
						writeString(this.price,dos);
					
					// String
				
						writeString(this.price_units,dos);
					
					// String
				
						writeString(this.inco_terms,dos);
					
					// String
				
						writeString(this.broker,dos);
					
					// String
				
						writeString(this.boker_ref_no,dos);
					
					// String
				
						writeString(this.commission,dos);
					
					// String
				
						writeString(this.sample,dos);
					
					// java.util.Date
				
						writeDate(this.etl_load_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("profit_center="+profit_center);
		sb.append(",product_name="+product_name);
		sb.append(",contract_type="+contract_type);
		sb.append(",issue_date="+String.valueOf(issue_date));
		sb.append(",contract_status="+contract_status);
		sb.append(",inventory_status="+inventory_status);
		sb.append(",contract_ref_no="+contract_ref_no);
		sb.append(",cp_ref="+cp_ref);
		sb.append(",cp_name="+cp_name);
		sb.append(",allocated_contract="+allocated_contract);
		sb.append(",origin="+origin);
		sb.append(",quality="+quality);
		sb.append(",crop_year="+String.valueOf(crop_year));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",quantity_unit="+quantity_unit);
		sb.append(",shipment_start_date="+String.valueOf(shipment_start_date));
		sb.append(",shipment_end_date="+String.valueOf(shipment_end_date));
		sb.append(",exchange="+exchange);
		sb.append(",month="+month);
		sb.append(",price="+price);
		sb.append(",price_units="+price_units);
		sb.append(",inco_terms="+inco_terms);
		sb.append(",broker="+broker);
		sb.append(",boker_ref_no="+boker_ref_no);
		sb.append(",commission="+commission);
		sb.append(",sample="+sample);
		sb.append(",etl_load_date="+String.valueOf(etl_load_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];

	
			    public String profit_center;

				public String getProfit_center () {
					return this.profit_center;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String contract_type;

				public String getContract_type () {
					return this.contract_type;
				}
				
			    public java.util.Date issue_date;

				public java.util.Date getIssue_date () {
					return this.issue_date;
				}
				
			    public String contract_status;

				public String getContract_status () {
					return this.contract_status;
				}
				
			    public String inventory_status;

				public String getInventory_status () {
					return this.inventory_status;
				}
				
			    public String contract_ref_no;

				public String getContract_ref_no () {
					return this.contract_ref_no;
				}
				
			    public String cp_ref;

				public String getCp_ref () {
					return this.cp_ref;
				}
				
			    public String cp_name;

				public String getCp_name () {
					return this.cp_name;
				}
				
			    public String allocated_contract;

				public String getAllocated_contract () {
					return this.allocated_contract;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String quality;

				public String getQuality () {
					return this.quality;
				}
				
			    public Integer crop_year;

				public Integer getCrop_year () {
					return this.crop_year;
				}
				
			    public Float quantity;

				public Float getQuantity () {
					return this.quantity;
				}
				
			    public String quantity_unit;

				public String getQuantity_unit () {
					return this.quantity_unit;
				}
				
			    public java.util.Date shipment_start_date;

				public java.util.Date getShipment_start_date () {
					return this.shipment_start_date;
				}
				
			    public java.util.Date shipment_end_date;

				public java.util.Date getShipment_end_date () {
					return this.shipment_end_date;
				}
				
			    public String exchange;

				public String getExchange () {
					return this.exchange;
				}
				
			    public String month;

				public String getMonth () {
					return this.month;
				}
				
			    public String price;

				public String getPrice () {
					return this.price;
				}
				
			    public String price_units;

				public String getPrice_units () {
					return this.price_units;
				}
				
			    public String inco_terms;

				public String getInco_terms () {
					return this.inco_terms;
				}
				
			    public String broker;

				public String getBroker () {
					return this.broker;
				}
				
			    public String boker_ref_no;

				public String getBoker_ref_no () {
					return this.boker_ref_no;
				}
				
			    public String commission;

				public String getCommission () {
					return this.commission;
				}
				
			    public String sample;

				public String getSample () {
					return this.sample;
				}
				
			    public java.util.Date etl_load_date;

				public java.util.Date getEtl_load_date () {
					return this.etl_load_date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.profit_center = readString(dis);
					
					this.product_name = readString(dis);
					
					this.contract_type = readString(dis);
					
					this.issue_date = readDate(dis);
					
					this.contract_status = readString(dis);
					
					this.inventory_status = readString(dis);
					
					this.contract_ref_no = readString(dis);
					
					this.cp_ref = readString(dis);
					
					this.cp_name = readString(dis);
					
					this.allocated_contract = readString(dis);
					
					this.origin = readString(dis);
					
					this.quality = readString(dis);
					
						this.crop_year = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantity = null;
           				} else {
           			    	this.quantity = dis.readFloat();
           				}
					
					this.quantity_unit = readString(dis);
					
					this.shipment_start_date = readDate(dis);
					
					this.shipment_end_date = readDate(dis);
					
					this.exchange = readString(dis);
					
					this.month = readString(dis);
					
					this.price = readString(dis);
					
					this.price_units = readString(dis);
					
					this.inco_terms = readString(dis);
					
					this.broker = readString(dis);
					
					this.boker_ref_no = readString(dis);
					
					this.commission = readString(dis);
					
					this.sample = readString(dis);
					
					this.etl_load_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.profit_center,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.contract_type,dos);
					
					// java.util.Date
				
						writeDate(this.issue_date,dos);
					
					// String
				
						writeString(this.contract_status,dos);
					
					// String
				
						writeString(this.inventory_status,dos);
					
					// String
				
						writeString(this.contract_ref_no,dos);
					
					// String
				
						writeString(this.cp_ref,dos);
					
					// String
				
						writeString(this.cp_name,dos);
					
					// String
				
						writeString(this.allocated_contract,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.quality,dos);
					
					// Integer
				
						writeInteger(this.crop_year,dos);
					
					// Float
				
						if(this.quantity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantity);
		            	}
					
					// String
				
						writeString(this.quantity_unit,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_end_date,dos);
					
					// String
				
						writeString(this.exchange,dos);
					
					// String
				
						writeString(this.month,dos);
					
					// String
				
						writeString(this.price,dos);
					
					// String
				
						writeString(this.price_units,dos);
					
					// String
				
						writeString(this.inco_terms,dos);
					
					// String
				
						writeString(this.broker,dos);
					
					// String
				
						writeString(this.boker_ref_no,dos);
					
					// String
				
						writeString(this.commission,dos);
					
					// String
				
						writeString(this.sample,dos);
					
					// java.util.Date
				
						writeDate(this.etl_load_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("profit_center="+profit_center);
		sb.append(",product_name="+product_name);
		sb.append(",contract_type="+contract_type);
		sb.append(",issue_date="+String.valueOf(issue_date));
		sb.append(",contract_status="+contract_status);
		sb.append(",inventory_status="+inventory_status);
		sb.append(",contract_ref_no="+contract_ref_no);
		sb.append(",cp_ref="+cp_ref);
		sb.append(",cp_name="+cp_name);
		sb.append(",allocated_contract="+allocated_contract);
		sb.append(",origin="+origin);
		sb.append(",quality="+quality);
		sb.append(",crop_year="+String.valueOf(crop_year));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",quantity_unit="+quantity_unit);
		sb.append(",shipment_start_date="+String.valueOf(shipment_start_date));
		sb.append(",shipment_end_date="+String.valueOf(shipment_end_date));
		sb.append(",exchange="+exchange);
		sb.append(",month="+month);
		sb.append(",price="+price);
		sb.append(",price_units="+price_units);
		sb.append(",inco_terms="+inco_terms);
		sb.append(",broker="+broker);
		sb.append(",boker_ref_no="+boker_ref_no);
		sb.append(",commission="+commission);
		sb.append(",sample="+sample);
		sb.append(",etl_load_date="+String.valueOf(etl_load_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_6Process(globalMap);
		tDBInput_7Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();
row8Struct row8 = new row8Struct();







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "cont_global_fact";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = context.mysql_Login;
		

		
	final String decryptedPassword_tDBOutput_1 = context.mysql_Password; 

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        if(table_tDBOutput_1.equalsIgnoreCase("cont_global_fact")) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1 + "`(`contract_type` VARCHAR(255)  ,`issue_date` DATETIME ,`contract_status` VARCHAR(255)  ,`inventory_status` VARCHAR(255)  ,`contract_ref_no` VARCHAR(255)  ,`cp_ref` VARCHAR(255)  ,`allocated_contract` VARCHAR(250)  ,`crop_year` INT(10)  ,`quantity` FLOAT(255,0)  ,`quantity_unit` VARCHAR(255)  ,`shipment_start_date` DATETIME ,`shipment_end_date` DATETIME ,`exchange` VARCHAR(255)  ,`month` VARCHAR(255)  ,`price` VARCHAR(255)  ,`price_units` VARCHAR(255)  ,`inco_terms` VARCHAR(255)  ,`boker_ref_no` VARCHAR(255)  ,`commission` VARCHAR(255)  ,`sample` VARCHAR(255)  ,`etl_load_date` DATETIME ,`product_key` INT(10)   not null ,`prod_quality_key` INT(10)   not null ,`cp_key` INT(10)   not null ,`broker_key` INT(0)   not null ,`profit_center_key` INT(10)   not null ,`country_key` INT(0)   not null )");
                                }

				String insert_tDBOutput_1 = "INSERT INTO `" + "cont_global_fact" + "` (`contract_type`,`issue_date`,`contract_status`,`inventory_status`,`contract_ref_no`,`cp_ref`,`allocated_contract`,`crop_year`,`quantity`,`quantity_unit`,`shipment_start_date`,`shipment_end_date`,`exchange`,`month`,`price`,`price_units`,`inco_terms`,`boker_ref_no`,`commission`,`sample`,`etl_load_date`,`product_key`,`prod_quality_key`,`cp_key`,`broker_key`,`profit_center_key`,`country_key`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 100;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
		        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = context.mysql_Login;
					
					
					
	final String decryptedPassword_tDBInput_1 = context.mysql_Password; 
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + context.mysql_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `cont_global_stage`.`profit_center`, \n  `cont_global_stage`.`product_name`, \n  `cont_global_stage`.`contract_"
+"type`, \n  `cont_global_stage`.`issue_date`, \n  `cont_global_stage`.`contract_status`, \n  `cont_global_stage`.`inventory_"
+"status`, \n  `cont_global_stage`.`contract_ref_no`, \n  `cont_global_stage`.`cp_ref`, \n  `cont_global_stage`.`cp_name`, \n "
+" `cont_global_stage`.`allocated_contract`, \n  `cont_global_stage`.`origin`, \n  `cont_global_stage`.`quality`, \n  `cont_g"
+"lobal_stage`.`crop_year`, \n  `cont_global_stage`.`quantity`, \n  `cont_global_stage`.`quantity_unit`, \n  `cont_global_sta"
+"ge`.`shipment_start_date`, \n  `cont_global_stage`.`shipment_end_date`, \n  `cont_global_stage`.`exchange`, \n  `cont_globa"
+"l_stage`.`month`, \n  `cont_global_stage`.`price`, \n  `cont_global_stage`.`price_units`, \n  `cont_global_stage`.`inco_ter"
+"ms`, \n  `cont_global_stage`.`broker`, \n  `cont_global_stage`.`boker_ref_no`, \n  `cont_global_stage`.`commission`, \n  `co"
+"nt_global_stage`.`sample`, \n  `cont_global_stage`.`etl_load_date`\nFROM `cont_global_stage`";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.profit_center = null;
							} else {
	                         		
        	row1.profit_center = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.product_name = null;
							} else {
	                         		
        	row1.product_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.contract_type = null;
							} else {
	                         		
        	row1.contract_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.issue_date = null;
							} else {
										
				if(rs_tDBInput_1.getString(4) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.issue_date = rs_tDBInput_1.getTimestamp(4);
					} else {
						row1.issue_date = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.issue_date =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.contract_status = null;
							} else {
	                         		
        	row1.contract_status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.inventory_status = null;
							} else {
	                         		
        	row1.inventory_status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.contract_ref_no = null;
							} else {
	                         		
        	row1.contract_ref_no = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.cp_ref = null;
							} else {
	                         		
        	row1.cp_ref = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.cp_name = null;
							} else {
	                         		
        	row1.cp_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.allocated_contract = null;
							} else {
	                         		
        	row1.allocated_contract = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.origin = null;
							} else {
	                         		
        	row1.origin = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.quality = null;
							} else {
	                         		
        	row1.quality = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.crop_year = null;
							} else {
		                          
            row1.crop_year = rs_tDBInput_1.getInt(13);
            if(rs_tDBInput_1.wasNull()){
                    row1.crop_year = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.quantity = null;
							} else {
		                          
            row1.quantity = rs_tDBInput_1.getFloat(14);
            if(rs_tDBInput_1.wasNull()){
                    row1.quantity = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.quantity_unit = null;
							} else {
	                         		
        	row1.quantity_unit = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.shipment_start_date = null;
							} else {
										
				if(rs_tDBInput_1.getString(16) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.shipment_start_date = rs_tDBInput_1.getTimestamp(16);
					} else {
						row1.shipment_start_date = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.shipment_start_date =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.shipment_end_date = null;
							} else {
										
				if(rs_tDBInput_1.getString(17) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(17);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.shipment_end_date = rs_tDBInput_1.getTimestamp(17);
					} else {
						row1.shipment_end_date = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.shipment_end_date =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.exchange = null;
							} else {
	                         		
        	row1.exchange = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.month = null;
							} else {
	                         		
        	row1.month = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.price = null;
							} else {
	                         		
        	row1.price = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.price_units = null;
							} else {
	                         		
        	row1.price_units = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.inco_terms = null;
							} else {
	                         		
        	row1.inco_terms = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.broker = null;
							} else {
	                         		
        	row1.broker = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.boker_ref_no = null;
							} else {
	                         		
        	row1.boker_ref_no = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.commission = null;
							} else {
	                         		
        	row1.commission = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.sample = null;
							} else {
	                         		
        	row1.sample = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.etl_load_date = null;
							} else {
										
				if(rs_tDBInput_1.getString(27) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(27);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.etl_load_date = rs_tDBInput_1.getTimestamp(27);
					} else {
						row1.etl_load_date = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.etl_load_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row2HashKey.product_name = row1.product_name ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.product_name = '" + row2HashKey.product_name + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row3HashKey.prod_quality_name = row1.quality ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.prod_quality_name = '" + row3HashKey.prod_quality_name + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row4HashKey.cp_name = row1.cp_name ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.cp_name = '" + row4HashKey.cp_name + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row5HashKey.broker_name = row1.broker ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.broker_name = '" + row5HashKey.broker_name + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.profit_center = row1.profit_center ;
out1_tmp.product_name = row1.product_name ;
out1_tmp.contract_type = row1.contract_type ;
out1_tmp.issue_date = row1.issue_date ;
out1_tmp.contract_status = row1.contract_status ;
out1_tmp.inventory_status = row1.inventory_status ;
out1_tmp.contract_ref_no = row1.contract_ref_no ;
out1_tmp.cp_ref = row1.cp_ref ;
out1_tmp.cp_name = row1.cp_name ;
out1_tmp.allocated_contract = row1.allocated_contract ;
out1_tmp.origin = row1.origin ;
out1_tmp.quality = row1.quality ;
out1_tmp.crop_year = row1.crop_year ;
out1_tmp.quantity = row1.quantity ;
out1_tmp.quantity_unit = row1.quantity_unit ;
out1_tmp.shipment_start_date = row1.shipment_start_date ;
out1_tmp.shipment_end_date = row1.shipment_end_date ;
out1_tmp.exchange = row1.exchange ;
out1_tmp.month = row1.month ;
out1_tmp.price = row1.price ;
out1_tmp.price_units = row1.price_units ;
out1_tmp.inco_terms = row1.inco_terms ;
out1_tmp.broker = row1.broker ;
out1_tmp.boker_ref_no = row1.boker_ref_no ;
out1_tmp.commission = row1.commission ;
out1_tmp.sample = row1.sample ;
out1_tmp.etl_load_date = row1.etl_load_date ;
out1_tmp.product_key = row2.product_key;
out1_tmp.prod_quality_key = row3.prod_quality_key  ;
out1_tmp.cp_key = row4.cp_key ;
out1_tmp.broker_key = row5.broker_key ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row6HashKey.profit_center_name = out1.profit_center ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.profit_center_name = '" + row6HashKey.profit_center_name + "'");
								} // G 071
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row7HashKey.country_name = out1.origin ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.country_name = '" + row7HashKey.country_name + "'");
								} // G 071
							

							row7Struct row7 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.profit_center = out1.profit_center ;
out2_tmp.product_name = out1.product_name ;
out2_tmp.contract_type = out1.contract_type ;
out2_tmp.issue_date = out1.issue_date ;
out2_tmp.contract_status = out1.contract_status ;
out2_tmp.inventory_status = out1.inventory_status ;
out2_tmp.contract_ref_no = out1.contract_ref_no ;
out2_tmp.cp_ref = out1.cp_ref ;
out2_tmp.cp_name = out1.cp_name ;
out2_tmp.allocated_contract = out1.allocated_contract ;
out2_tmp.origin = out1.origin ;
out2_tmp.quality = out1.quality ;
out2_tmp.crop_year = out1.crop_year ;
out2_tmp.quantity = out1.quantity ;
out2_tmp.quantity_unit = out1.quantity_unit ;
out2_tmp.shipment_start_date = out1.shipment_start_date ;
out2_tmp.shipment_end_date = out1.shipment_end_date ;
out2_tmp.exchange = out1.exchange ;
out2_tmp.month = out1.month ;
out2_tmp.price = out1.price ;
out2_tmp.price_units = out1.price_units ;
out2_tmp.inco_terms = out1.inco_terms ;
out2_tmp.broker = out1.broker ;
out2_tmp.boker_ref_no = out1.boker_ref_no ;
out2_tmp.commission = out1.commission ;
out2_tmp.sample = out1.sample ;
out2_tmp.etl_load_date = out1.etl_load_date ;
out2_tmp.product_key = out1.product_key ;
out2_tmp.prod_quality_key = out1.prod_quality_key ;
out2_tmp.cp_key = out1.cp_key ;
out2_tmp.broker_key = out1.broker_key ;
out2_tmp.profit_center_key = row6.profit_center_key;
out2_tmp.country_key = row7.country_key ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					


  row8 = new row8Struct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              row8.contract_type=TypeConvert.String2String(out2.contract_type);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.issue_date=TypeConvert.Date2Date(out2.issue_date);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.contract_status=TypeConvert.String2String(out2.contract_status);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.inventory_status=TypeConvert.String2String(out2.inventory_status);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.contract_ref_no=TypeConvert.String2String(out2.contract_ref_no);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.cp_ref=TypeConvert.String2String(out2.cp_ref);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.allocated_contract=TypeConvert.String2String(out2.allocated_contract);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.crop_year=TypeConvert.Integer2Integer(out2.crop_year);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.quantity=TypeConvert.Float2Float(out2.quantity);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.quantity_unit=TypeConvert.String2String(out2.quantity_unit);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.shipment_start_date=TypeConvert.Date2Date(out2.shipment_start_date);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.shipment_end_date=TypeConvert.Date2Date(out2.shipment_end_date);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.exchange=TypeConvert.String2String(out2.exchange);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.month=TypeConvert.String2String(out2.month);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.price=TypeConvert.String2String(out2.price);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.price_units=TypeConvert.String2String(out2.price_units);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.inco_terms=TypeConvert.String2String(out2.inco_terms);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.boker_ref_no=TypeConvert.String2String(out2.boker_ref_no);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.commission=TypeConvert.String2String(out2.commission);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.sample=TypeConvert.String2String(out2.sample);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.etl_load_date=TypeConvert.Date2Date(out2.etl_load_date);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.product_key=TypeConvert.Integer2int(out2.product_key);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.prod_quality_key=TypeConvert.Integer2int(out2.prod_quality_key);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.cp_key=TypeConvert.Integer2int(out2.cp_key);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.broker_key=TypeConvert.Integer2int(out2.broker_key);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.profit_center_key=TypeConvert.Integer2int(out2.profit_center_key);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row8.country_key=TypeConvert.Integer2int(out2.country_key);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {row8 = null;}

  nb_line_tConvertType_1 ++ ;
 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					



        whetherReject_tDBOutput_1 = false;
                            if(row8.contract_type == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row8.contract_type);
}

                            if(row8.issue_date != null) {
date_tDBOutput_1 = row8.issue_date.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(2, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.DATE);
}

                            if(row8.contract_status == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, row8.contract_status);
}

                            if(row8.inventory_status == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, row8.inventory_status);
}

                            if(row8.contract_ref_no == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row8.contract_ref_no);
}

                            if(row8.cp_ref == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, row8.cp_ref);
}

                            if(row8.allocated_contract == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, row8.allocated_contract);
}

                            if(row8.crop_year == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(8, row8.crop_year);
}

                            if(row8.quantity == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(9, row8.quantity);
}

                            if(row8.quantity_unit == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, row8.quantity_unit);
}

                            if(row8.shipment_start_date != null) {
date_tDBOutput_1 = row8.shipment_start_date.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(11, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(11, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.DATE);
}

                            if(row8.shipment_end_date != null) {
date_tDBOutput_1 = row8.shipment_end_date.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(12, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.DATE);
}

                            if(row8.exchange == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, row8.exchange);
}

                            if(row8.month == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, row8.month);
}

                            if(row8.price == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, row8.price);
}

                            if(row8.price_units == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, row8.price_units);
}

                            if(row8.inco_terms == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, row8.inco_terms);
}

                            if(row8.boker_ref_no == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, row8.boker_ref_no);
}

                            if(row8.commission == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, row8.commission);
}

                            if(row8.sample == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, row8.sample);
}

                            if(row8.etl_load_date != null) {
date_tDBOutput_1 = row8.etl_load_date.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(21, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(21, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.DATE);
}

                            pstmt_tDBOutput_1.setInt(22, row8.product_key);

                            pstmt_tDBOutput_1.setInt(23, row8.prod_quality_key);

                            pstmt_tDBOutput_1.setInt(24, row8.cp_key);

                            pstmt_tDBOutput_1.setInt(25, row8.broker_key);

                            pstmt_tDBOutput_1.setInt(26, row8.profit_center_key);

                            pstmt_tDBOutput_1.setInt(27, row8.country_key);

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

                      batchSizeCounter_tDBOutput_1++;
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0) {
    		
    		conn_tDBOutput_1.commit();
    		
    	}
    		
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.product_name == null) ? 0 : this.product_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.product_name == null) {
							if (other.product_name != null)
								return false;
						
						} else if (!this.product_name.equals(other.product_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.product_key = this.product_key;
	            other.product_name = this.product_name;
	            other.etl_date = this.etl_date;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.product_name = this.product_name;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.product_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.product_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.product_key = readInteger(dis,ois);
					
						this.etl_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.product_key, dos, oos);
					
						writeDate(this.etl_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_key="+String.valueOf(product_key));
		sb.append(",product_name="+product_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.product_name, other.product_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = context.mysql_Login;
					
					
					
	final String decryptedPassword_tDBInput_2 = context.mysql_Password; 
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + context.mysql_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  `product_dim`.`product_key`, \n  `product_dim`.`product_name`, \n  `product_dim`.`etl_date`\nFROM `product_dim`";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.product_key = null;
							} else {
		                          
            row2.product_key = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    row2.product_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.product_name = null;
							} else {
	                         		
        	row2.product_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.etl_date = null;
							} else {
										
				if(rs_tDBInput_2.getString(3) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.etl_date = rs_tDBInput_2.getTimestamp(3);
					} else {
						row2.etl_date = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.etl_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.product_key = row2.product_key;
				
				row2_HashRow.product_name = row2.product_name;
				
				row2_HashRow.etl_date = row2.etl_date;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer prod_quality_key;

				public Integer getProd_quality_key () {
					return this.prod_quality_key;
				}
				
			    public Integer fk_prod_key;

				public Integer getFk_prod_key () {
					return this.fk_prod_key;
				}
				
			    public String prod_quality_name;

				public String getProd_quality_name () {
					return this.prod_quality_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prod_quality_name == null) ? 0 : this.prod_quality_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.prod_quality_name == null) {
							if (other.prod_quality_name != null)
								return false;
						
						} else if (!this.prod_quality_name.equals(other.prod_quality_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.prod_quality_key = this.prod_quality_key;
	            other.fk_prod_key = this.fk_prod_key;
	            other.prod_quality_name = this.prod_quality_name;
	            other.etl_date = this.etl_date;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.prod_quality_name = this.prod_quality_name;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.prod_quality_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.prod_quality_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.prod_quality_key = readInteger(dis,ois);
					
						this.fk_prod_key = readInteger(dis,ois);
					
						this.etl_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.prod_quality_key, dos, oos);
					
					writeInteger(this.fk_prod_key, dos, oos);
					
						writeDate(this.etl_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prod_quality_key="+String.valueOf(prod_quality_key));
		sb.append(",fk_prod_key="+String.valueOf(fk_prod_key));
		sb.append(",prod_quality_name="+prod_quality_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prod_quality_name, other.prod_quality_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = context.mysql_Login;
					
					
					
	final String decryptedPassword_tDBInput_3 = context.mysql_Password; 
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + context.mysql_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  `prod_quality_dim`.`prod_quality_key`, \n  `prod_quality_dim`.`fk_prod_key`, \n  `prod_quality_dim`.`prod_quali"
+"ty_name`, \n  `prod_quality_dim`.`etl_date`\nFROM `prod_quality_dim`";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.prod_quality_key = null;
							} else {
		                          
            row3.prod_quality_key = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    row3.prod_quality_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.fk_prod_key = null;
							} else {
		                          
            row3.fk_prod_key = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    row3.fk_prod_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.prod_quality_name = null;
							} else {
	                         		
        	row3.prod_quality_name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.etl_date = null;
							} else {
										
				if(rs_tDBInput_3.getString(4) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row3.etl_date = rs_tDBInput_3.getTimestamp(4);
					} else {
						row3.etl_date = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row3.etl_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.prod_quality_key = row3.prod_quality_key;
				
				row3_HashRow.fk_prod_key = row3.fk_prod_key;
				
				row3_HashRow.prod_quality_name = row3.prod_quality_name;
				
				row3_HashRow.etl_date = row3.etl_date;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer cp_key;

				public Integer getCp_key () {
					return this.cp_key;
				}
				
			    public String cp_name;

				public String getCp_name () {
					return this.cp_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.cp_name == null) ? 0 : this.cp_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.cp_name == null) {
							if (other.cp_name != null)
								return false;
						
						} else if (!this.cp_name.equals(other.cp_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.cp_key = this.cp_key;
	            other.cp_name = this.cp_name;
	            other.etl_date = this.etl_date;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.cp_name = this.cp_name;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.cp_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cp_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.cp_key = readInteger(dis,ois);
					
						this.etl_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.cp_key, dos, oos);
					
						writeDate(this.etl_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cp_key="+String.valueOf(cp_key));
		sb.append(",cp_name="+cp_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.cp_name, other.cp_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
					String dbUser_tDBInput_4 = context.mysql_Login;
					
					
					
	final String decryptedPassword_tDBInput_4 = context.mysql_Password; 
					
					String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + context.mysql_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  `cp_dim`.`cp_key`, \n  `cp_dim`.`cp_name`, \n  `cp_dim`.`etl_date`\nFROM `cp_dim`";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.cp_key = null;
							} else {
		                          
            row4.cp_key = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    row4.cp_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.cp_name = null;
							} else {
	                         		
        	row4.cp_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row4.etl_date = null;
							} else {
										
				if(rs_tDBInput_4.getString(3) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						row4.etl_date = rs_tDBInput_4.getTimestamp(3);
					} else {
						row4.etl_date = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					row4.etl_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.cp_key = row4.cp_key;
				
				row4_HashRow.cp_name = row4.cp_name;
				
				row4_HashRow.etl_date = row4.etl_date;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
		


 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer broker_key;

				public Integer getBroker_key () {
					return this.broker_key;
				}
				
			    public String broker_name;

				public String getBroker_name () {
					return this.broker_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.broker_name == null) ? 0 : this.broker_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.broker_name == null) {
							if (other.broker_name != null)
								return false;
						
						} else if (!this.broker_name.equals(other.broker_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.broker_key = this.broker_key;
	            other.broker_name = this.broker_name;
	            other.etl_date = this.etl_date;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.broker_name = this.broker_name;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.broker_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.broker_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.broker_key = readInteger(dis,ois);
					
						this.etl_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.broker_key, dos, oos);
					
						writeDate(this.etl_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("broker_key="+String.valueOf(broker_key));
		sb.append(",broker_name="+broker_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.broker_name, other.broker_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
		    calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
					String dbUser_tDBInput_5 = context.mysql_Login;
					
					
					
	final String decryptedPassword_tDBInput_5 = context.mysql_Password; 
					
					String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + context.mysql_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  `broker_dim`.`broker_key`, \n  `broker_dim`.`broker_name`, \n  `broker_dim`.`etl_date`\nFROM `broker_dim`";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row5.broker_key = null;
							} else {
		                          
            row5.broker_key = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    row5.broker_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row5.broker_name = null;
							} else {
	                         		
        	row5.broker_name = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row5.etl_date = null;
							} else {
										
				if(rs_tDBInput_5.getString(3) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row5.etl_date = rs_tDBInput_5.getTimestamp(3);
					} else {
						row5.etl_date = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row5.etl_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.broker_key = row5.broker_key;
				
				row5_HashRow.broker_name = row5.broker_name;
				
				row5_HashRow.etl_date = row5.etl_date;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
		


 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer profit_center_key;

				public Integer getProfit_center_key () {
					return this.profit_center_key;
				}
				
			    public String profit_center_name;

				public String getProfit_center_name () {
					return this.profit_center_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.profit_center_name == null) ? 0 : this.profit_center_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.profit_center_name == null) {
							if (other.profit_center_name != null)
								return false;
						
						} else if (!this.profit_center_name.equals(other.profit_center_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.profit_center_key = this.profit_center_key;
	            other.profit_center_name = this.profit_center_name;
	            other.etl_date = this.etl_date;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.profit_center_name = this.profit_center_name;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.profit_center_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.profit_center_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.profit_center_key = readInteger(dis,ois);
					
						this.etl_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.profit_center_key, dos, oos);
					
						writeDate(this.etl_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("profit_center_key="+String.valueOf(profit_center_key));
		sb.append(",profit_center_name="+profit_center_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.profit_center_name, other.profit_center_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_2 - inputs:(out1,row6,row7) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
		    calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
					String dbUser_tDBInput_6 = context.mysql_Login;
					
					
					
	final String decryptedPassword_tDBInput_6 = context.mysql_Password; 
					
					String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + context.mysql_AdditionalParams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT \n  `profit_center_dim`.`profit_center_key`, \n  `profit_center_dim`.`profit_center_name`, \n  `profit_center_dim`."
+"`etl_date`\nFROM `profit_center_dim`";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row6.profit_center_key = null;
							} else {
		                          
            row6.profit_center_key = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    row6.profit_center_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row6.profit_center_name = null;
							} else {
	                         		
        	row6.profit_center_name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row6.etl_date = null;
							} else {
										
				if(rs_tDBInput_6.getString(3) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						row6.etl_date = rs_tDBInput_6.getTimestamp(3);
					} else {
						row6.etl_date = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					row6.etl_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.profit_center_key = row6.profit_center_key;
				
				row6_HashRow.profit_center_name = row6.profit_center_name;
				
				row6_HashRow.etl_date = row6.etl_date;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
		


 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_cont_fact_load = new byte[0];
    static byte[] commonByteArray_CONT_ETL_cont_fact_load = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer country_key;

				public Integer getCountry_key () {
					return this.country_key;
				}
				
			    public Integer fk_region_key;

				public Integer getFk_region_key () {
					return this.fk_region_key;
				}
				
			    public String country_name;

				public String getCountry_name () {
					return this.country_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.country_name == null) ? 0 : this.country_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.country_name == null) {
							if (other.country_name != null)
								return false;
						
						} else if (!this.country_name.equals(other.country_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.country_key = this.country_key;
	            other.fk_region_key = this.fk_region_key;
	            other.country_name = this.country_name;
	            other.etl_date = this.etl_date;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.country_name = this.country_name;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_cont_fact_load.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_cont_fact_load.length == 0) {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_cont_fact_load = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_cont_fact_load, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_cont_fact_load, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_cont_fact_load) {

        	try {

        		int length = 0;
		
					this.country_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.country_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.country_key = readInteger(dis,ois);
					
						this.fk_region_key = readInteger(dis,ois);
					
						this.etl_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.country_key, dos, oos);
					
					writeInteger(this.fk_region_key, dos, oos);
					
						writeDate(this.etl_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_key="+String.valueOf(country_key));
		sb.append(",fk_region_key="+String.valueOf(fk_region_key));
		sb.append(",country_name="+country_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.country_name, other.country_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_2 - inputs:(out1,row6,row7) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_7 = java.util.Calendar.getInstance();
		    calendar_tDBInput_7.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_7 = calendar_tDBInput_7.getTime();
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
					String dbUser_tDBInput_7 = context.mysql_Login;
					
					
					
	final String decryptedPassword_tDBInput_7 = context.mysql_Password; 
					
					String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + context.mysql_AdditionalParams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT \n  `country_dim`.`country_key`, \n  `country_dim`.`fk_region_key`, \n  `country_dim`.`country_name`, \n  `country_d"
+"im`.`etl_date`\nFROM `country_dim`";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row7.country_key = null;
							} else {
		                          
            row7.country_key = rs_tDBInput_7.getInt(1);
            if(rs_tDBInput_7.wasNull()){
                    row7.country_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row7.fk_region_key = null;
							} else {
		                          
            row7.fk_region_key = rs_tDBInput_7.getInt(2);
            if(rs_tDBInput_7.wasNull()){
                    row7.fk_region_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row7.country_name = null;
							} else {
	                         		
        	row7.country_name = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row7.etl_date = null;
							} else {
										
				if(rs_tDBInput_7.getString(4) != null) {
					String dateString_tDBInput_7 = rs_tDBInput_7.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_7) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_7)) {
						row7.etl_date = rs_tDBInput_7.getTimestamp(4);
					} else {
						row7.etl_date = (java.util.Date) year0_tDBInput_7.clone();
					}
				} else {
					row7.etl_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.country_key = row7.country_key;
				
				row7_HashRow.fk_region_key = row7.fk_region_key;
				
				row7_HashRow.country_name = row7.country_name;
				
				row7_HashRow.etl_date = row7.etl_date;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
		if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
			
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
		


 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final cont_fact_load cont_fact_loadClass = new cont_fact_load();

        int exitCode = cont_fact_loadClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = cont_fact_load.class.getClassLoader().getResourceAsStream("cont_etl/cont_fact_load_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = cont_fact_load.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("mysql_AdditionalParams", "id_String");
                            context.mysql_AdditionalParams=(String) context.getProperty("mysql_AdditionalParams");
                        context.setContextType("mysql_Login", "id_String");
                            context.mysql_Login=(String) context.getProperty("mysql_Login");
                        context.setContextType("mysql_Server", "id_String");
                            context.mysql_Server=(String) context.getProperty("mysql_Server");
                        context.setContextType("mysql_Port", "id_String");
                            context.mysql_Port=(String) context.getProperty("mysql_Port");
                        context.setContextType("mysql_Database", "id_String");
                            context.mysql_Database=(String) context.getProperty("mysql_Database");
                        context.setContextType("mysql_Password", "id_Password");
                            String pwd_mysql_Password_value = context.getProperty("mysql_Password");
                            context.mysql_Password = null;
                            if(pwd_mysql_Password_value!=null) {
                                if(context_param.containsKey("mysql_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.mysql_Password = pwd_mysql_Password_value;
                                } else if (!pwd_mysql_Password_value.isEmpty()) {
                                    try {
                                        context.mysql_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_mysql_Password_value);
                                        context.put("mysql_Password",context.mysql_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("mysql_AdditionalParams")) {
                context.mysql_AdditionalParams = (String) parentContextMap.get("mysql_AdditionalParams");
            }if (parentContextMap.containsKey("mysql_Login")) {
                context.mysql_Login = (String) parentContextMap.get("mysql_Login");
            }if (parentContextMap.containsKey("mysql_Server")) {
                context.mysql_Server = (String) parentContextMap.get("mysql_Server");
            }if (parentContextMap.containsKey("mysql_Port")) {
                context.mysql_Port = (String) parentContextMap.get("mysql_Port");
            }if (parentContextMap.containsKey("mysql_Database")) {
                context.mysql_Database = (String) parentContextMap.get("mysql_Database");
            }if (parentContextMap.containsKey("mysql_Password")) {
                context.mysql_Password = (java.lang.String) parentContextMap.get("mysql_Password");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("mysql_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : cont_fact_load");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     258139 characters generated by Talend Open Studio for Data Integration 
 *     on the December 8, 2019 7:18:27 PST PM
 ************************************************************************************************/