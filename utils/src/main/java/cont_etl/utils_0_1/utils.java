// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package cont_etl.utils_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: utils Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class utils implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(mysql_AdditionalParams != null){
				
					this.setProperty("mysql_AdditionalParams", mysql_AdditionalParams.toString());
				
			}
			
			if(mysql_Login != null){
				
					this.setProperty("mysql_Login", mysql_Login.toString());
				
			}
			
			if(mysql_Server != null){
				
					this.setProperty("mysql_Server", mysql_Server.toString());
				
			}
			
			if(mysql_Port != null){
				
					this.setProperty("mysql_Port", mysql_Port.toString());
				
			}
			
			if(mysql_Database != null){
				
					this.setProperty("mysql_Database", mysql_Database.toString());
				
			}
			
			if(mysql_Password != null){
				
					this.setProperty("mysql_Password", mysql_Password.toString());
				
			}
			
		}

public String mysql_AdditionalParams;
public String getMysql_AdditionalParams(){
	return this.mysql_AdditionalParams;
}
public String mysql_Login;
public String getMysql_Login(){
	return this.mysql_Login;
}
public String mysql_Server;
public String getMysql_Server(){
	return this.mysql_Server;
}
public String mysql_Port;
public String getMysql_Port(){
	return this.mysql_Port;
}
public String mysql_Database;
public String getMysql_Database(){
	return this.mysql_Database;
}
public java.lang.String mysql_Password;
public java.lang.String getMysql_Password(){
	return this.mysql_Password;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "utils";
	private final String projectName = "CONT_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				utils.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(utils.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer execution_id;

				public Integer getExecution_id () {
					return this.execution_id;
				}
				
			    public String process_id;

				public String getProcess_id () {
					return this.process_id;
				}
				
			    public String job_name;

				public String getJob_name () {
					return this.job_name;
				}
				
			    public String project_name;

				public String getProject_name () {
					return this.project_name;
				}
				
			    public String job_run_status;

				public String getJob_run_status () {
					return this.job_run_status;
				}
				
			    public java.util.Date job_start__time;

				public java.util.Date getJob_start__time () {
					return this.job_start__time;
				}
				
			    public java.util.Date job_end_time;

				public java.util.Date getJob_end_time () {
					return this.job_end_time;
				}
				
			    public String ERROR_MESSAGE;

				public String getERROR_MESSAGE () {
					return this.ERROR_MESSAGE;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.execution_id = readInteger(dis);
					
					this.process_id = readString(dis);
					
					this.job_name = readString(dis);
					
					this.project_name = readString(dis);
					
					this.job_run_status = readString(dis);
					
					this.job_start__time = readDate(dis);
					
					this.job_end_time = readDate(dis);
					
					this.ERROR_MESSAGE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.execution_id,dos);
					
					// String
				
						writeString(this.process_id,dos);
					
					// String
				
						writeString(this.job_name,dos);
					
					// String
				
						writeString(this.project_name,dos);
					
					// String
				
						writeString(this.job_run_status,dos);
					
					// java.util.Date
				
						writeDate(this.job_start__time,dos);
					
					// java.util.Date
				
						writeDate(this.job_end_time,dos);
					
					// String
				
						writeString(this.ERROR_MESSAGE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("execution_id="+String.valueOf(execution_id));
		sb.append(",process_id="+process_id);
		sb.append(",job_name="+job_name);
		sb.append(",project_name="+project_name);
		sb.append(",job_run_status="+job_run_status);
		sb.append(",job_start__time="+String.valueOf(job_start__time));
		sb.append(",job_end_time="+String.valueOf(job_end_time));
		sb.append(",ERROR_MESSAGE="+ERROR_MESSAGE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "job_execution_log";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

int count_tDBOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        if(table_tDBOutput_1.equalsIgnoreCase("job_execution_log")) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1 + "`(`execution_id` INT(20)  ,`process_id` VARCHAR(50)  ,`job_name` VARCHAR(100)  ,`project_name` VARCHAR(100)  ,`job_run_status` VARCHAR(20)  ,`job_start__time` DATETIME ,`job_end_time` DATETIME ,`ERROR_MESSAGE` VARCHAR(255)  )");
                                }

				String insert_tDBOutput_1 = "INSERT INTO `" + "job_execution_log" + "` (`execution_id`,`process_id`,`job_name`,`project_name`,`job_run_status`,`job_start__time`,`job_end_time`,`ERROR_MESSAGE`) VALUES (?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 100;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
		        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";

	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row1.newColumn = randtRowGenerator_1.getRandomnewColumn();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.execution_id = null;
out1_tmp.process_id = null;
out1_tmp.job_name = null;
out1_tmp.project_name = null;
out1_tmp.job_run_status = null;
out1_tmp.job_start__time = null;
out1_tmp.job_end_time = null;
out1_tmp.ERROR_MESSAGE = null;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					



        whetherReject_tDBOutput_1 = false;
                            if(out1.execution_id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(1, out1.execution_id);
}

                            if(out1.process_id == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, out1.process_id);
}

                            if(out1.job_name == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, out1.job_name);
}

                            if(out1.project_name == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, out1.project_name);
}

                            if(out1.job_run_status == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, out1.job_run_status);
}

                            if(out1.job_start__time != null) {
date_tDBOutput_1 = out1.job_start__time.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(6, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.DATE);
}

                            if(out1.job_end_time != null) {
date_tDBOutput_1 = out1.job_end_time.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(7, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.DATE);
}

                            if(out1.ERROR_MESSAGE == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, out1.ERROR_MESSAGE);
}

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

                      batchSizeCounter_tDBOutput_1++;
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tRowGenerator_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer log_key;

				public Integer getLog_key () {
					return this.log_key;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public java.util.Date file_loaded_timestamp;

				public java.util.Date getFile_loaded_timestamp () {
					return this.file_loaded_timestamp;
				}
				
			    public String source_system;

				public String getSource_system () {
					return this.source_system;
				}
				
			    public java.util.Date etl_load_date;

				public java.util.Date getEtl_load_date () {
					return this.etl_load_date;
				}
				
			    public Integer records_received;

				public Integer getRecords_received () {
					return this.records_received;
				}
				
			    public Integer records_in_audit;

				public Integer getRecords_in_audit () {
					return this.records_in_audit;
				}
				
			    public String valid_flag;

				public String getValid_flag () {
					return this.valid_flag;
				}
				
			    public Integer records_processed_to_prestage;

				public Integer getRecords_processed_to_prestage () {
					return this.records_processed_to_prestage;
				}
				
			    public Integer records_rejected_in_prestage;

				public Integer getRecords_rejected_in_prestage () {
					return this.records_rejected_in_prestage;
				}
				
			    public Integer records_processed_to_stage;

				public Integer getRecords_processed_to_stage () {
					return this.records_processed_to_stage;
				}
				
			    public Integer records_rejected_to_stage;

				public Integer getRecords_rejected_to_stage () {
					return this.records_rejected_to_stage;
				}
				
			    public java.util.Date etl_updated_date;

				public java.util.Date getEtl_updated_date () {
					return this.etl_updated_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.log_key = readInteger(dis);
					
					this.file_name = readString(dis);
					
					this.file_loaded_timestamp = readDate(dis);
					
					this.source_system = readString(dis);
					
					this.etl_load_date = readDate(dis);
					
						this.records_received = readInteger(dis);
					
						this.records_in_audit = readInteger(dis);
					
					this.valid_flag = readString(dis);
					
						this.records_processed_to_prestage = readInteger(dis);
					
						this.records_rejected_in_prestage = readInteger(dis);
					
						this.records_processed_to_stage = readInteger(dis);
					
						this.records_rejected_to_stage = readInteger(dis);
					
					this.etl_updated_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.log_key,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
					// java.util.Date
				
						writeDate(this.file_loaded_timestamp,dos);
					
					// String
				
						writeString(this.source_system,dos);
					
					// java.util.Date
				
						writeDate(this.etl_load_date,dos);
					
					// Integer
				
						writeInteger(this.records_received,dos);
					
					// Integer
				
						writeInteger(this.records_in_audit,dos);
					
					// String
				
						writeString(this.valid_flag,dos);
					
					// Integer
				
						writeInteger(this.records_processed_to_prestage,dos);
					
					// Integer
				
						writeInteger(this.records_rejected_in_prestage,dos);
					
					// Integer
				
						writeInteger(this.records_processed_to_stage,dos);
					
					// Integer
				
						writeInteger(this.records_rejected_to_stage,dos);
					
					// java.util.Date
				
						writeDate(this.etl_updated_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("log_key="+String.valueOf(log_key));
		sb.append(",file_name="+file_name);
		sb.append(",file_loaded_timestamp="+String.valueOf(file_loaded_timestamp));
		sb.append(",source_system="+source_system);
		sb.append(",etl_load_date="+String.valueOf(etl_load_date));
		sb.append(",records_received="+String.valueOf(records_received));
		sb.append(",records_in_audit="+String.valueOf(records_in_audit));
		sb.append(",valid_flag="+valid_flag);
		sb.append(",records_processed_to_prestage="+String.valueOf(records_processed_to_prestage));
		sb.append(",records_rejected_in_prestage="+String.valueOf(records_rejected_in_prestage));
		sb.append(",records_processed_to_stage="+String.valueOf(records_processed_to_stage));
		sb.append(",records_rejected_to_stage="+String.valueOf(records_rejected_to_stage));
		sb.append(",etl_updated_date="+String.valueOf(etl_updated_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tDBOutput_2 = 0;
		






int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;

int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "log_source_file";
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
long date_tDBOutput_2;

java.sql.Connection conn_tDBOutput_2 = null;
	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

int count_tDBOutput_2=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        if(table_tDBOutput_2.equalsIgnoreCase("log_source_file")) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtDrop_tDBOutput_2.execute("DROP TABLE `" + tableName_tDBOutput_2 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2 + "`(`log_key` INT(0)  ,`file_name` VARCHAR(0)  ,`file_loaded_timestamp` DATETIME ,`source_system` VARCHAR(0)  ,`etl_load_date` DATETIME ,`records_received` INT(0)  ,`records_in_audit` INT(0)  ,`valid_flag` VARCHAR(0)  ,`records_processed_to_prestage` INT(0)  ,`records_rejected_in_prestage` INT(0)  ,`records_processed_to_stage` INT(0)  ,`records_rejected_to_stage` INT(0)  ,`etl_updated_date` DATETIME )");
                                }

				String insert_tDBOutput_2 = "INSERT INTO `" + "log_source_file" + "` (`log_key`,`file_name`,`file_loaded_timestamp`,`source_system`,`etl_load_date`,`records_received`,`records_in_audit`,`valid_flag`,`records_processed_to_prestage`,`records_rejected_in_prestage`,`records_processed_to_stage`,`records_rejected_to_stage`,`etl_updated_date`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_2 = 100;
	   			int batchSizeCounter_tDBOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
		        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_2", false);
		start_Hash.put("tRowGenerator_2", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_2";

	
		int tos_count_tRowGenerator_2 = 0;
		


int nb_line_tRowGenerator_2 = 0;
int nb_max_row_tRowGenerator_2 = 1;


class tRowGenerator_2Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();
	
	for (int itRowGenerator_2=0; itRowGenerator_2<nb_max_row_tRowGenerator_2 ;itRowGenerator_2++) {
		row2.newColumn = randtRowGenerator_2.getRandomnewColumn();
		nb_line_tRowGenerator_2++;
		

 



/**
 * [tRowGenerator_2 begin ] stop
 */
	
	/**
	 * [tRowGenerator_2 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

 


	tos_count_tRowGenerator_2++;

/**
 * [tRowGenerator_2 main ] stop
 */
	
	/**
	 * [tRowGenerator_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

 



/**
 * [tRowGenerator_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.log_key = null;
out2_tmp.file_name = null;
out2_tmp.file_loaded_timestamp = null;
out2_tmp.source_system = null;
out2_tmp.etl_load_date = null;
out2_tmp.records_received = null;
out2_tmp.records_in_audit = null;
out2_tmp.valid_flag = null;
out2_tmp.records_processed_to_prestage = null;
out2_tmp.records_rejected_in_prestage = null;
out2_tmp.records_processed_to_stage = null;
out2_tmp.records_rejected_to_stage = null;
out2_tmp.etl_updated_date = null;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					



        whetherReject_tDBOutput_2 = false;
                            if(out2.log_key == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(1, out2.log_key);
}

                            if(out2.file_name == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, out2.file_name);
}

                            if(out2.file_loaded_timestamp != null) {
date_tDBOutput_2 = out2.file_loaded_timestamp.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.DATE);
}

                            if(out2.source_system == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, out2.source_system);
}

                            if(out2.etl_load_date != null) {
date_tDBOutput_2 = out2.etl_load_date.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(5, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(5, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.DATE);
}

                            if(out2.records_received == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, out2.records_received);
}

                            if(out2.records_in_audit == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(7, out2.records_in_audit);
}

                            if(out2.valid_flag == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, out2.valid_flag);
}

                            if(out2.records_processed_to_prestage == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(9, out2.records_processed_to_prestage);
}

                            if(out2.records_rejected_in_prestage == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(10, out2.records_rejected_in_prestage);
}

                            if(out2.records_processed_to_stage == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(11, out2.records_processed_to_stage);
}

                            if(out2.records_rejected_to_stage == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(12, out2.records_rejected_to_stage);
}

                            if(out2.etl_updated_date != null) {
date_tDBOutput_2 = out2.etl_updated_date.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(13, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(13, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_2.addBatch();
                    nb_line_tDBOutput_2++;

                      batchSizeCounter_tDBOutput_2++;
                if ( batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_2 = 0;
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

 



/**
 * [tRowGenerator_2 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_2 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

}
globalMap.put("tRowGenerator_2_NB_LINE",nb_line_tRowGenerator_2);

 

ok_Hash.put("tRowGenerator_2", true);
end_Hash.put("tRowGenerator_2", System.currentTimeMillis());




/**
 * [tRowGenerator_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



                try {
                		if (batchSizeCounter_tDBOutput_2 != 0) {
							int countSum_tDBOutput_2 = 0;
							
							for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
								countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_2 = 0;
    		
	

        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
				resourceMap.remove("pstmt_tDBOutput_2");
			
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRowGenerator_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_2 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

 



/**
 * [tRowGenerator_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String profit_center;

				public String getProfit_center () {
					return this.profit_center;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String contract_type;

				public String getContract_type () {
					return this.contract_type;
				}
				
			    public String issue_date;

				public String getIssue_date () {
					return this.issue_date;
				}
				
			    public String contract_status;

				public String getContract_status () {
					return this.contract_status;
				}
				
			    public String inventory_status;

				public String getInventory_status () {
					return this.inventory_status;
				}
				
			    public String contract_ref_no;

				public String getContract_ref_no () {
					return this.contract_ref_no;
				}
				
			    public String cp_ref;

				public String getCp_ref () {
					return this.cp_ref;
				}
				
			    public String cp_name;

				public String getCp_name () {
					return this.cp_name;
				}
				
			    public String allocated_contract;

				public String getAllocated_contract () {
					return this.allocated_contract;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String quality;

				public String getQuality () {
					return this.quality;
				}
				
			    public String crop_year;

				public String getCrop_year () {
					return this.crop_year;
				}
				
			    public String quantity;

				public String getQuantity () {
					return this.quantity;
				}
				
			    public String quantity_unit;

				public String getQuantity_unit () {
					return this.quantity_unit;
				}
				
			    public String shipment_start_date;

				public String getShipment_start_date () {
					return this.shipment_start_date;
				}
				
			    public String shipment_end_date;

				public String getShipment_end_date () {
					return this.shipment_end_date;
				}
				
			    public String exchange;

				public String getExchange () {
					return this.exchange;
				}
				
			    public String month;

				public String getMonth () {
					return this.month;
				}
				
			    public String price;

				public String getPrice () {
					return this.price;
				}
				
			    public String price_units;

				public String getPrice_units () {
					return this.price_units;
				}
				
			    public String inco_terms;

				public String getInco_terms () {
					return this.inco_terms;
				}
				
			    public String broker;

				public String getBroker () {
					return this.broker;
				}
				
			    public String boker_ref_no;

				public String getBoker_ref_no () {
					return this.boker_ref_no;
				}
				
			    public String commission;

				public String getCommission () {
					return this.commission;
				}
				
			    public String sample;

				public String getSample () {
					return this.sample;
				}
				
			    public String etl_load_date;

				public String getEtl_load_date () {
					return this.etl_load_date;
				}
				
			    public String error_code;

				public String getError_code () {
					return this.error_code;
				}
				
			    public String error_message;

				public String getError_message () {
					return this.error_message;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.profit_center = readString(dis);
					
					this.product_name = readString(dis);
					
					this.contract_type = readString(dis);
					
					this.issue_date = readString(dis);
					
					this.contract_status = readString(dis);
					
					this.inventory_status = readString(dis);
					
					this.contract_ref_no = readString(dis);
					
					this.cp_ref = readString(dis);
					
					this.cp_name = readString(dis);
					
					this.allocated_contract = readString(dis);
					
					this.origin = readString(dis);
					
					this.quality = readString(dis);
					
					this.crop_year = readString(dis);
					
					this.quantity = readString(dis);
					
					this.quantity_unit = readString(dis);
					
					this.shipment_start_date = readString(dis);
					
					this.shipment_end_date = readString(dis);
					
					this.exchange = readString(dis);
					
					this.month = readString(dis);
					
					this.price = readString(dis);
					
					this.price_units = readString(dis);
					
					this.inco_terms = readString(dis);
					
					this.broker = readString(dis);
					
					this.boker_ref_no = readString(dis);
					
					this.commission = readString(dis);
					
					this.sample = readString(dis);
					
					this.etl_load_date = readString(dis);
					
					this.error_code = readString(dis);
					
					this.error_message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.profit_center,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.contract_type,dos);
					
					// String
				
						writeString(this.issue_date,dos);
					
					// String
				
						writeString(this.contract_status,dos);
					
					// String
				
						writeString(this.inventory_status,dos);
					
					// String
				
						writeString(this.contract_ref_no,dos);
					
					// String
				
						writeString(this.cp_ref,dos);
					
					// String
				
						writeString(this.cp_name,dos);
					
					// String
				
						writeString(this.allocated_contract,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.quality,dos);
					
					// String
				
						writeString(this.crop_year,dos);
					
					// String
				
						writeString(this.quantity,dos);
					
					// String
				
						writeString(this.quantity_unit,dos);
					
					// String
				
						writeString(this.shipment_start_date,dos);
					
					// String
				
						writeString(this.shipment_end_date,dos);
					
					// String
				
						writeString(this.exchange,dos);
					
					// String
				
						writeString(this.month,dos);
					
					// String
				
						writeString(this.price,dos);
					
					// String
				
						writeString(this.price_units,dos);
					
					// String
				
						writeString(this.inco_terms,dos);
					
					// String
				
						writeString(this.broker,dos);
					
					// String
				
						writeString(this.boker_ref_no,dos);
					
					// String
				
						writeString(this.commission,dos);
					
					// String
				
						writeString(this.sample,dos);
					
					// String
				
						writeString(this.etl_load_date,dos);
					
					// String
				
						writeString(this.error_code,dos);
					
					// String
				
						writeString(this.error_message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("profit_center="+profit_center);
		sb.append(",product_name="+product_name);
		sb.append(",contract_type="+contract_type);
		sb.append(",issue_date="+issue_date);
		sb.append(",contract_status="+contract_status);
		sb.append(",inventory_status="+inventory_status);
		sb.append(",contract_ref_no="+contract_ref_no);
		sb.append(",cp_ref="+cp_ref);
		sb.append(",cp_name="+cp_name);
		sb.append(",allocated_contract="+allocated_contract);
		sb.append(",origin="+origin);
		sb.append(",quality="+quality);
		sb.append(",crop_year="+crop_year);
		sb.append(",quantity="+quantity);
		sb.append(",quantity_unit="+quantity_unit);
		sb.append(",shipment_start_date="+shipment_start_date);
		sb.append(",shipment_end_date="+shipment_end_date);
		sb.append(",exchange="+exchange);
		sb.append(",month="+month);
		sb.append(",price="+price);
		sb.append(",price_units="+price_units);
		sb.append(",inco_terms="+inco_terms);
		sb.append(",broker="+broker);
		sb.append(",boker_ref_no="+boker_ref_no);
		sb.append(",commission="+commission);
		sb.append(",sample="+sample);
		sb.append(",etl_load_date="+etl_load_date);
		sb.append(",error_code="+error_code);
		sb.append(",error_message="+error_message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
out3Struct out3 = new out3Struct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tDBOutput_3 = 0;
		






int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;

int rejectedCount_tDBOutput_3=0;

String tableName_tDBOutput_3 = "error_global_stage";
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
long date_tDBOutput_3;

java.sql.Connection conn_tDBOutput_3 = null;
	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

int count_tDBOutput_3=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        if(table_tDBOutput_3.equalsIgnoreCase("error_global_stage")) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtDrop_tDBOutput_3.execute("DROP TABLE `" + tableName_tDBOutput_3 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                    stmtCreate_tDBOutput_3.execute("CREATE TABLE `" + tableName_tDBOutput_3 + "`(`profit_center` VARCHAR(255)  ,`product_name` VARCHAR(255)  ,`contract_type` VARCHAR(255)  ,`issue_date` VARCHAR(255)  ,`contract_status` VARCHAR(255)  ,`inventory_status` VARCHAR(255)  ,`contract_ref_no` VARCHAR(255)  ,`cp_ref` VARCHAR(255)  ,`cp_name` VARCHAR(255)  ,`allocated_contract` VARCHAR(250)  ,`origin` VARCHAR(255)  ,`quality` VARCHAR(255)  ,`crop_year` VARCHAR(255)  ,`quantity` VARCHAR(255)  ,`quantity_unit` VARCHAR(255)  ,`shipment_start_date` VARCHAR(255)  ,`shipment_end_date` VARCHAR(255)  ,`exchange` VARCHAR(255)  ,`month` VARCHAR(255)  ,`price` VARCHAR(255)  ,`price_units` VARCHAR(255)  ,`inco_terms` VARCHAR(255)  ,`broker` VARCHAR(255)  ,`boker_ref_no` VARCHAR(255)  ,`commission` VARCHAR(255)  ,`sample` VARCHAR(255)  ,`etl_load_date` VARCHAR(255)  ,`error_code` VARCHAR(255)  ,`error_message` VARCHAR(255)  )");
                                }

				String insert_tDBOutput_3 = "INSERT INTO `" + "error_global_stage" + "` (`profit_center`,`product_name`,`contract_type`,`issue_date`,`contract_status`,`inventory_status`,`contract_ref_no`,`cp_ref`,`cp_name`,`allocated_contract`,`origin`,`quality`,`crop_year`,`quantity`,`quantity_unit`,`shipment_start_date`,`shipment_end_date`,`exchange`,`month`,`price`,`price_units`,`inco_terms`,`broker`,`boker_ref_no`,`commission`,`sample`,`etl_load_date`,`error_code`,`error_message`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_3 = 100;
	   			int batchSizeCounter_tDBOutput_3=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
		        resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tRowGenerator_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_3", false);
		start_Hash.put("tRowGenerator_3", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_3";

	
		int tos_count_tRowGenerator_3 = 0;
		


int nb_line_tRowGenerator_3 = 0;
int nb_max_row_tRowGenerator_3 = 1;


class tRowGenerator_3Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_3Randomizer randtRowGenerator_3 = new tRowGenerator_3Randomizer();
	
	for (int itRowGenerator_3=0; itRowGenerator_3<nb_max_row_tRowGenerator_3 ;itRowGenerator_3++) {
		row3.newColumn = randtRowGenerator_3.getRandomnewColumn();
		nb_line_tRowGenerator_3++;
		

 



/**
 * [tRowGenerator_3 begin ] stop
 */
	
	/**
	 * [tRowGenerator_3 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_3";

	

 


	tos_count_tRowGenerator_3++;

/**
 * [tRowGenerator_3 main ] stop
 */
	
	/**
	 * [tRowGenerator_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_3";

	

 



/**
 * [tRowGenerator_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.profit_center = null;
out3_tmp.product_name = null;
out3_tmp.contract_type = null;
out3_tmp.issue_date = null;
out3_tmp.contract_status = null;
out3_tmp.inventory_status = null;
out3_tmp.contract_ref_no = null;
out3_tmp.cp_ref = null;
out3_tmp.cp_name = null;
out3_tmp.allocated_contract = null;
out3_tmp.origin = null;
out3_tmp.quality = null;
out3_tmp.crop_year = null;
out3_tmp.quantity = null;
out3_tmp.quantity_unit = null;
out3_tmp.shipment_start_date = null;
out3_tmp.shipment_end_date = null;
out3_tmp.exchange = null;
out3_tmp.month = null;
out3_tmp.price = null;
out3_tmp.price_units = null;
out3_tmp.inco_terms = null;
out3_tmp.broker = null;
out3_tmp.boker_ref_no = null;
out3_tmp.commission = null;
out3_tmp.sample = null;
out3_tmp.etl_load_date = null;
out3_tmp.error_code = null;
out3_tmp.error_message = null;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					



        whetherReject_tDBOutput_3 = false;
                            if(out3.profit_center == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, out3.profit_center);
}

                            if(out3.product_name == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, out3.product_name);
}

                            if(out3.contract_type == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, out3.contract_type);
}

                            if(out3.issue_date == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, out3.issue_date);
}

                            if(out3.contract_status == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, out3.contract_status);
}

                            if(out3.inventory_status == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, out3.inventory_status);
}

                            if(out3.contract_ref_no == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, out3.contract_ref_no);
}

                            if(out3.cp_ref == null) {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(8, out3.cp_ref);
}

                            if(out3.cp_name == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, out3.cp_name);
}

                            if(out3.allocated_contract == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, out3.allocated_contract);
}

                            if(out3.origin == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, out3.origin);
}

                            if(out3.quality == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, out3.quality);
}

                            if(out3.crop_year == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, out3.crop_year);
}

                            if(out3.quantity == null) {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(14, out3.quantity);
}

                            if(out3.quantity_unit == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, out3.quantity_unit);
}

                            if(out3.shipment_start_date == null) {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(16, out3.shipment_start_date);
}

                            if(out3.shipment_end_date == null) {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(17, out3.shipment_end_date);
}

                            if(out3.exchange == null) {
pstmt_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(18, out3.exchange);
}

                            if(out3.month == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, out3.month);
}

                            if(out3.price == null) {
pstmt_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(20, out3.price);
}

                            if(out3.price_units == null) {
pstmt_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(21, out3.price_units);
}

                            if(out3.inco_terms == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, out3.inco_terms);
}

                            if(out3.broker == null) {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(23, out3.broker);
}

                            if(out3.boker_ref_no == null) {
pstmt_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(24, out3.boker_ref_no);
}

                            if(out3.commission == null) {
pstmt_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(25, out3.commission);
}

                            if(out3.sample == null) {
pstmt_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(26, out3.sample);
}

                            if(out3.etl_load_date == null) {
pstmt_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(27, out3.etl_load_date);
}

                            if(out3.error_code == null) {
pstmt_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(28, out3.error_code);
}

                            if(out3.error_message == null) {
pstmt_tDBOutput_3.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(29, out3.error_message);
}

                    pstmt_tDBOutput_3.addBatch();
                    nb_line_tDBOutput_3++;

                      batchSizeCounter_tDBOutput_3++;
                if ( batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
                try {
                        int countSum_tDBOutput_3 = 0;
                        for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_3 = 0;
                    for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
                        countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                    }
                    insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_3 = 0;
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_3";

	

 



/**
 * [tRowGenerator_3 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_3 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_3";

	

}
globalMap.put("tRowGenerator_3_NB_LINE",nb_line_tRowGenerator_3);

 

ok_Hash.put("tRowGenerator_3", true);
end_Hash.put("tRowGenerator_3", System.currentTimeMillis());




/**
 * [tRowGenerator_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



                try {
                		if (batchSizeCounter_tDBOutput_3 != 0) {
							int countSum_tDBOutput_3 = 0;
							
							for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
								countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
            	    insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_3 = 0;
    		
	

        if(pstmt_tDBOutput_3 != null) {
			
				pstmt_tDBOutput_3.close();
				resourceMap.remove("pstmt_tDBOutput_3");
			
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRowGenerator_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_3 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_3";

	

 



/**
 * [tRowGenerator_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_3_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String profit_center;

				public String getProfit_center () {
					return this.profit_center;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String contract_type;

				public String getContract_type () {
					return this.contract_type;
				}
				
			    public java.util.Date issue_date;

				public java.util.Date getIssue_date () {
					return this.issue_date;
				}
				
			    public String contract_status;

				public String getContract_status () {
					return this.contract_status;
				}
				
			    public String inventory_status;

				public String getInventory_status () {
					return this.inventory_status;
				}
				
			    public String contract_ref_no;

				public String getContract_ref_no () {
					return this.contract_ref_no;
				}
				
			    public String cp_ref;

				public String getCp_ref () {
					return this.cp_ref;
				}
				
			    public String cp_name;

				public String getCp_name () {
					return this.cp_name;
				}
				
			    public String allocated_contract;

				public String getAllocated_contract () {
					return this.allocated_contract;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String quality;

				public String getQuality () {
					return this.quality;
				}
				
			    public Integer crop_year;

				public Integer getCrop_year () {
					return this.crop_year;
				}
				
			    public Float quantity;

				public Float getQuantity () {
					return this.quantity;
				}
				
			    public String quantity_unit;

				public String getQuantity_unit () {
					return this.quantity_unit;
				}
				
			    public java.util.Date shipment_start_date;

				public java.util.Date getShipment_start_date () {
					return this.shipment_start_date;
				}
				
			    public java.util.Date shipment_end_date;

				public java.util.Date getShipment_end_date () {
					return this.shipment_end_date;
				}
				
			    public String exchange;

				public String getExchange () {
					return this.exchange;
				}
				
			    public String month;

				public String getMonth () {
					return this.month;
				}
				
			    public String price;

				public String getPrice () {
					return this.price;
				}
				
			    public String price_units;

				public String getPrice_units () {
					return this.price_units;
				}
				
			    public String inco_terms;

				public String getInco_terms () {
					return this.inco_terms;
				}
				
			    public String broker;

				public String getBroker () {
					return this.broker;
				}
				
			    public String boker_ref_no;

				public String getBoker_ref_no () {
					return this.boker_ref_no;
				}
				
			    public String commission;

				public String getCommission () {
					return this.commission;
				}
				
			    public String sample;

				public String getSample () {
					return this.sample;
				}
				
			    public java.util.Date etl_load_date;

				public java.util.Date getEtl_load_date () {
					return this.etl_load_date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.profit_center = readString(dis);
					
					this.product_name = readString(dis);
					
					this.contract_type = readString(dis);
					
					this.issue_date = readDate(dis);
					
					this.contract_status = readString(dis);
					
					this.inventory_status = readString(dis);
					
					this.contract_ref_no = readString(dis);
					
					this.cp_ref = readString(dis);
					
					this.cp_name = readString(dis);
					
					this.allocated_contract = readString(dis);
					
					this.origin = readString(dis);
					
					this.quality = readString(dis);
					
						this.crop_year = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantity = null;
           				} else {
           			    	this.quantity = dis.readFloat();
           				}
					
					this.quantity_unit = readString(dis);
					
					this.shipment_start_date = readDate(dis);
					
					this.shipment_end_date = readDate(dis);
					
					this.exchange = readString(dis);
					
					this.month = readString(dis);
					
					this.price = readString(dis);
					
					this.price_units = readString(dis);
					
					this.inco_terms = readString(dis);
					
					this.broker = readString(dis);
					
					this.boker_ref_no = readString(dis);
					
					this.commission = readString(dis);
					
					this.sample = readString(dis);
					
					this.etl_load_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.profit_center,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.contract_type,dos);
					
					// java.util.Date
				
						writeDate(this.issue_date,dos);
					
					// String
				
						writeString(this.contract_status,dos);
					
					// String
				
						writeString(this.inventory_status,dos);
					
					// String
				
						writeString(this.contract_ref_no,dos);
					
					// String
				
						writeString(this.cp_ref,dos);
					
					// String
				
						writeString(this.cp_name,dos);
					
					// String
				
						writeString(this.allocated_contract,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.quality,dos);
					
					// Integer
				
						writeInteger(this.crop_year,dos);
					
					// Float
				
						if(this.quantity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantity);
		            	}
					
					// String
				
						writeString(this.quantity_unit,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.shipment_end_date,dos);
					
					// String
				
						writeString(this.exchange,dos);
					
					// String
				
						writeString(this.month,dos);
					
					// String
				
						writeString(this.price,dos);
					
					// String
				
						writeString(this.price_units,dos);
					
					// String
				
						writeString(this.inco_terms,dos);
					
					// String
				
						writeString(this.broker,dos);
					
					// String
				
						writeString(this.boker_ref_no,dos);
					
					// String
				
						writeString(this.commission,dos);
					
					// String
				
						writeString(this.sample,dos);
					
					// java.util.Date
				
						writeDate(this.etl_load_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("profit_center="+profit_center);
		sb.append(",product_name="+product_name);
		sb.append(",contract_type="+contract_type);
		sb.append(",issue_date="+String.valueOf(issue_date));
		sb.append(",contract_status="+contract_status);
		sb.append(",inventory_status="+inventory_status);
		sb.append(",contract_ref_no="+contract_ref_no);
		sb.append(",cp_ref="+cp_ref);
		sb.append(",cp_name="+cp_name);
		sb.append(",allocated_contract="+allocated_contract);
		sb.append(",origin="+origin);
		sb.append(",quality="+quality);
		sb.append(",crop_year="+String.valueOf(crop_year));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",quantity_unit="+quantity_unit);
		sb.append(",shipment_start_date="+String.valueOf(shipment_start_date));
		sb.append(",shipment_end_date="+String.valueOf(shipment_end_date));
		sb.append(",exchange="+exchange);
		sb.append(",month="+month);
		sb.append(",price="+price);
		sb.append(",price_units="+price_units);
		sb.append(",inco_terms="+inco_terms);
		sb.append(",broker="+broker);
		sb.append(",boker_ref_no="+boker_ref_no);
		sb.append(",commission="+commission);
		sb.append(",sample="+sample);
		sb.append(",etl_load_date="+String.valueOf(etl_load_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
out4Struct out4 = new out4Struct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tDBOutput_4 = 0;
		






int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;

int rejectedCount_tDBOutput_4=0;

String tableName_tDBOutput_4 = "cont_global_stage";
boolean whetherReject_tDBOutput_4 = false;

java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
long date_tDBOutput_4;

java.sql.Connection conn_tDBOutput_4 = null;
	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

int count_tDBOutput_4=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
                                boolean whetherExist_tDBOutput_4 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_4.next()) {
                                        String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
                                        if(table_tDBOutput_4.equalsIgnoreCase("cont_global_stage")) {
                                            whetherExist_tDBOutput_4 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_4) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                        stmtDrop_tDBOutput_4.execute("DROP TABLE `" + tableName_tDBOutput_4 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                    stmtCreate_tDBOutput_4.execute("CREATE TABLE `" + tableName_tDBOutput_4 + "`(`profit_center` VARCHAR(255)  ,`product_name` VARCHAR(255)  ,`contract_type` VARCHAR(255)  ,`issue_date` DATETIME ,`contract_status` VARCHAR(255)  ,`inventory_status` VARCHAR(255)  ,`contract_ref_no` VARCHAR(255)  ,`cp_ref` VARCHAR(255)  ,`cp_name` VARCHAR(255)  ,`allocated_contract` VARCHAR(250)  ,`origin` VARCHAR(255)  ,`quality` VARCHAR(255)  ,`crop_year` INT(255)  ,`quantity` FLOAT(255,0)  ,`quantity_unit` VARCHAR(255)  ,`shipment_start_date` DATETIME ,`shipment_end_date` DATETIME ,`exchange` VARCHAR(255)  ,`month` VARCHAR(255)  ,`price` VARCHAR(255)  ,`price_units` VARCHAR(255)  ,`inco_terms` VARCHAR(255)  ,`broker` VARCHAR(255)  ,`boker_ref_no` VARCHAR(255)  ,`commission` VARCHAR(255)  ,`sample` VARCHAR(255)  ,`etl_load_date` DATETIME )");
                                }

				String insert_tDBOutput_4 = "INSERT INTO `" + "cont_global_stage" + "` (`profit_center`,`product_name`,`contract_type`,`issue_date`,`contract_status`,`inventory_status`,`contract_ref_no`,`cp_ref`,`cp_name`,`allocated_contract`,`origin`,`quality`,`crop_year`,`quantity`,`quantity_unit`,`shipment_start_date`,`shipment_end_date`,`exchange`,`month`,`price`,`price_units`,`inco_terms`,`broker`,`boker_ref_no`,`commission`,`sample`,`etl_load_date`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_4 = 100;
	   			int batchSizeCounter_tDBOutput_4=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
		        resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);


 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tRowGenerator_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_4", false);
		start_Hash.put("tRowGenerator_4", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_4";

	
		int tos_count_tRowGenerator_4 = 0;
		


int nb_line_tRowGenerator_4 = 0;
int nb_max_row_tRowGenerator_4 = 1;


class tRowGenerator_4Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_4Randomizer randtRowGenerator_4 = new tRowGenerator_4Randomizer();
	
	for (int itRowGenerator_4=0; itRowGenerator_4<nb_max_row_tRowGenerator_4 ;itRowGenerator_4++) {
		row4.newColumn = randtRowGenerator_4.getRandomnewColumn();
		nb_line_tRowGenerator_4++;
		

 



/**
 * [tRowGenerator_4 begin ] stop
 */
	
	/**
	 * [tRowGenerator_4 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_4";

	

 


	tos_count_tRowGenerator_4++;

/**
 * [tRowGenerator_4 main ] stop
 */
	
	/**
	 * [tRowGenerator_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_4";

	

 



/**
 * [tRowGenerator_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.profit_center = null;
out4_tmp.product_name = null;
out4_tmp.contract_type = null;
out4_tmp.issue_date = null;
out4_tmp.contract_status = null;
out4_tmp.inventory_status = null;
out4_tmp.contract_ref_no = null;
out4_tmp.cp_ref = null;
out4_tmp.cp_name = null;
out4_tmp.allocated_contract = null;
out4_tmp.origin = null;
out4_tmp.quality = null;
out4_tmp.crop_year = null;
out4_tmp.quantity = null;
out4_tmp.quantity_unit = null;
out4_tmp.shipment_start_date = null;
out4_tmp.shipment_end_date = null;
out4_tmp.exchange = null;
out4_tmp.month = null;
out4_tmp.price = null;
out4_tmp.price_units = null;
out4_tmp.inco_terms = null;
out4_tmp.broker = null;
out4_tmp.boker_ref_no = null;
out4_tmp.commission = null;
out4_tmp.sample = null;
out4_tmp.etl_load_date = null;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					



        whetherReject_tDBOutput_4 = false;
                            if(out4.profit_center == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, out4.profit_center);
}

                            if(out4.product_name == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, out4.product_name);
}

                            if(out4.contract_type == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, out4.contract_type);
}

                            if(out4.issue_date != null) {
date_tDBOutput_4 = out4.issue_date.getTime();
if(date_tDBOutput_4 < year1_tDBOutput_4 || date_tDBOutput_4 >= year10000_tDBOutput_4) {
pstmt_tDBOutput_4.setString(4, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_4.setTimestamp(4, new java.sql.Timestamp(date_tDBOutput_4));
}
} else {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.DATE);
}

                            if(out4.contract_status == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, out4.contract_status);
}

                            if(out4.inventory_status == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, out4.inventory_status);
}

                            if(out4.contract_ref_no == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, out4.contract_ref_no);
}

                            if(out4.cp_ref == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(8, out4.cp_ref);
}

                            if(out4.cp_name == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, out4.cp_name);
}

                            if(out4.allocated_contract == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, out4.allocated_contract);
}

                            if(out4.origin == null) {
pstmt_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(11, out4.origin);
}

                            if(out4.quality == null) {
pstmt_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(12, out4.quality);
}

                            if(out4.crop_year == null) {
pstmt_tDBOutput_4.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(13, out4.crop_year);
}

                            if(out4.quantity == null) {
pstmt_tDBOutput_4.setNull(14, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_4.setFloat(14, out4.quantity);
}

                            if(out4.quantity_unit == null) {
pstmt_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(15, out4.quantity_unit);
}

                            if(out4.shipment_start_date != null) {
date_tDBOutput_4 = out4.shipment_start_date.getTime();
if(date_tDBOutput_4 < year1_tDBOutput_4 || date_tDBOutput_4 >= year10000_tDBOutput_4) {
pstmt_tDBOutput_4.setString(16, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_4.setTimestamp(16, new java.sql.Timestamp(date_tDBOutput_4));
}
} else {
pstmt_tDBOutput_4.setNull(16, java.sql.Types.DATE);
}

                            if(out4.shipment_end_date != null) {
date_tDBOutput_4 = out4.shipment_end_date.getTime();
if(date_tDBOutput_4 < year1_tDBOutput_4 || date_tDBOutput_4 >= year10000_tDBOutput_4) {
pstmt_tDBOutput_4.setString(17, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_4.setTimestamp(17, new java.sql.Timestamp(date_tDBOutput_4));
}
} else {
pstmt_tDBOutput_4.setNull(17, java.sql.Types.DATE);
}

                            if(out4.exchange == null) {
pstmt_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(18, out4.exchange);
}

                            if(out4.month == null) {
pstmt_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(19, out4.month);
}

                            if(out4.price == null) {
pstmt_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(20, out4.price);
}

                            if(out4.price_units == null) {
pstmt_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(21, out4.price_units);
}

                            if(out4.inco_terms == null) {
pstmt_tDBOutput_4.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(22, out4.inco_terms);
}

                            if(out4.broker == null) {
pstmt_tDBOutput_4.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(23, out4.broker);
}

                            if(out4.boker_ref_no == null) {
pstmt_tDBOutput_4.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(24, out4.boker_ref_no);
}

                            if(out4.commission == null) {
pstmt_tDBOutput_4.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(25, out4.commission);
}

                            if(out4.sample == null) {
pstmt_tDBOutput_4.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(26, out4.sample);
}

                            if(out4.etl_load_date != null) {
date_tDBOutput_4 = out4.etl_load_date.getTime();
if(date_tDBOutput_4 < year1_tDBOutput_4 || date_tDBOutput_4 >= year10000_tDBOutput_4) {
pstmt_tDBOutput_4.setString(27, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_4.setTimestamp(27, new java.sql.Timestamp(date_tDBOutput_4));
}
} else {
pstmt_tDBOutput_4.setNull(27, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_4.addBatch();
                    nb_line_tDBOutput_4++;

                      batchSizeCounter_tDBOutput_4++;
                if ( batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
                try {
                        int countSum_tDBOutput_4 = 0;
                        for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
                            countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_4 = 0;
                    for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
                        countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                    }
                    insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_4 = 0;
            }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_4";

	

 



/**
 * [tRowGenerator_4 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_4 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_4";

	

}
globalMap.put("tRowGenerator_4_NB_LINE",nb_line_tRowGenerator_4);

 

ok_Hash.put("tRowGenerator_4", true);
end_Hash.put("tRowGenerator_4", System.currentTimeMillis());




/**
 * [tRowGenerator_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



                try {
                		if (batchSizeCounter_tDBOutput_4 != 0) {
							int countSum_tDBOutput_4 = 0;
							
							for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
								countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					
            	    insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_4 = 0;
    		
	

        if(pstmt_tDBOutput_4 != null) {
			
				pstmt_tDBOutput_4.close();
				resourceMap.remove("pstmt_tDBOutput_4");
			
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRowGenerator_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_4 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_4";

	

 



/**
 * [tRowGenerator_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_4_SUBPROCESS_STATE", 1);
	}
	


public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.product_key = readInteger(dis);
					
					this.product_name = readString(dis);
					
					this.etl_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// java.util.Date
				
						writeDate(this.etl_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_key="+String.valueOf(product_key));
		sb.append(",product_name="+product_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
out5Struct out5 = new out5Struct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tDBOutput_5 = 0;
		






int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;

int rejectedCount_tDBOutput_5=0;

String tableName_tDBOutput_5 = "product_dim";
boolean whetherReject_tDBOutput_5 = false;

java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
long date_tDBOutput_5;

java.sql.Connection conn_tDBOutput_5 = null;
	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

int count_tDBOutput_5=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
                                boolean whetherExist_tDBOutput_5 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_5.next()) {
                                        String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
                                        if(table_tDBOutput_5.equalsIgnoreCase("product_dim")) {
                                            whetherExist_tDBOutput_5 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_5) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                        stmtDrop_tDBOutput_5.execute("DROP TABLE `" + tableName_tDBOutput_5 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                    stmtCreate_tDBOutput_5.execute("CREATE TABLE `" + tableName_tDBOutput_5 + "`(`product_key` INT(0)  ,`product_name` VARCHAR(500)  ,`etl_date` DATETIME )");
                                }

				String insert_tDBOutput_5 = "INSERT INTO `" + "product_dim" + "` (`product_key`,`product_name`,`etl_date`) VALUES (?,?,?)";
		        int batchSize_tDBOutput_5 = 100;
	   			int batchSizeCounter_tDBOutput_5=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
		        resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);


 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tRowGenerator_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_5", false);
		start_Hash.put("tRowGenerator_5", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_5";

	
		int tos_count_tRowGenerator_5 = 0;
		


int nb_line_tRowGenerator_5 = 0;
int nb_max_row_tRowGenerator_5 = 1;


class tRowGenerator_5Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_5Randomizer randtRowGenerator_5 = new tRowGenerator_5Randomizer();
	
	for (int itRowGenerator_5=0; itRowGenerator_5<nb_max_row_tRowGenerator_5 ;itRowGenerator_5++) {
		row5.newColumn = randtRowGenerator_5.getRandomnewColumn();
		nb_line_tRowGenerator_5++;
		

 



/**
 * [tRowGenerator_5 begin ] stop
 */
	
	/**
	 * [tRowGenerator_5 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

 


	tos_count_tRowGenerator_5++;

/**
 * [tRowGenerator_5 main ] stop
 */
	
	/**
	 * [tRowGenerator_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

 



/**
 * [tRowGenerator_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.product_key = null;
out5_tmp.product_name = null;
out5_tmp.etl_date = null;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					



        whetherReject_tDBOutput_5 = false;
                            if(out5.product_key == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(1, out5.product_key);
}

                            if(out5.product_name == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, out5.product_name);
}

                            if(out5.etl_date != null) {
date_tDBOutput_5 = out5.etl_date.getTime();
if(date_tDBOutput_5 < year1_tDBOutput_5 || date_tDBOutput_5 >= year10000_tDBOutput_5) {
pstmt_tDBOutput_5.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_5.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_5));
}
} else {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_5.addBatch();
                    nb_line_tDBOutput_5++;

                      batchSizeCounter_tDBOutput_5++;
                if ( batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
                try {
                        int countSum_tDBOutput_5 = 0;
                        for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
                            countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_5 = 0;
                    for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
                        countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                    }
                    insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_5 = 0;
            }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

 



/**
 * [tRowGenerator_5 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_5 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

}
globalMap.put("tRowGenerator_5_NB_LINE",nb_line_tRowGenerator_5);

 

ok_Hash.put("tRowGenerator_5", true);
end_Hash.put("tRowGenerator_5", System.currentTimeMillis());




/**
 * [tRowGenerator_5 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



                try {
                		if (batchSizeCounter_tDBOutput_5 != 0) {
							int countSum_tDBOutput_5 = 0;
							
							for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
								countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					
            	    insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_5 = 0;
    		
	

        if(pstmt_tDBOutput_5 != null) {
			
				pstmt_tDBOutput_5.close();
				resourceMap.remove("pstmt_tDBOutput_5");
			
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRowGenerator_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_5 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

 



/**
 * [tRowGenerator_5 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_5_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout5Struct implements routines.system.IPersistableRow<copyOfout5Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer broker_key;

				public Integer getBroker_key () {
					return this.broker_key;
				}
				
			    public String broker_name;

				public String getBroker_name () {
					return this.broker_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.broker_key = readInteger(dis);
					
					this.broker_name = readString(dis);
					
					this.etl_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.broker_key,dos);
					
					// String
				
						writeString(this.broker_name,dos);
					
					// java.util.Date
				
						writeDate(this.etl_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("broker_key="+String.valueOf(broker_key));
		sb.append(",broker_name="+broker_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
copyOfout5Struct copyOfout5 = new copyOfout5Struct();





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout5");
					}
				
		int tos_count_tDBOutput_6 = 0;
		






int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;

int rejectedCount_tDBOutput_6=0;

String tableName_tDBOutput_6 = "broker_dim";
boolean whetherReject_tDBOutput_6 = false;

java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar.getInstance();
calendar_tDBOutput_6.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
calendar_tDBOutput_6.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
long date_tDBOutput_6;

java.sql.Connection conn_tDBOutput_6 = null;
	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

int count_tDBOutput_6=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
                                boolean whetherExist_tDBOutput_6 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_6.next()) {
                                        String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
                                        if(table_tDBOutput_6.equalsIgnoreCase("broker_dim")) {
                                            whetherExist_tDBOutput_6 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_6) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                        stmtDrop_tDBOutput_6.execute("DROP TABLE `" + tableName_tDBOutput_6 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                    stmtCreate_tDBOutput_6.execute("CREATE TABLE `" + tableName_tDBOutput_6 + "`(`broker_key` INT(0)  ,`broker_name` VARCHAR(500)  ,`etl_date` DATETIME )");
                                }

				String insert_tDBOutput_6 = "INSERT INTO `" + "broker_dim" + "` (`broker_key`,`broker_name`,`etl_date`) VALUES (?,?,?)";
		        int batchSize_tDBOutput_6 = 100;
	   			int batchSizeCounter_tDBOutput_6=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
		        resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);


 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout5Struct copyOfout5_tmp = new copyOfout5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tRowGenerator_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_6", false);
		start_Hash.put("tRowGenerator_6", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_6";

	
		int tos_count_tRowGenerator_6 = 0;
		


int nb_line_tRowGenerator_6 = 0;
int nb_max_row_tRowGenerator_6 = 1;


class tRowGenerator_6Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_6Randomizer randtRowGenerator_6 = new tRowGenerator_6Randomizer();
	
	for (int itRowGenerator_6=0; itRowGenerator_6<nb_max_row_tRowGenerator_6 ;itRowGenerator_6++) {
		row6.newColumn = randtRowGenerator_6.getRandomnewColumn();
		nb_line_tRowGenerator_6++;
		

 



/**
 * [tRowGenerator_6 begin ] stop
 */
	
	/**
	 * [tRowGenerator_6 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

 


	tos_count_tRowGenerator_6++;

/**
 * [tRowGenerator_6 main ] stop
 */
	
	/**
	 * [tRowGenerator_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

 



/**
 * [tRowGenerator_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfout5 = null;


// # Output table : 'copyOfout5'
copyOfout5_tmp.broker_key = null;
copyOfout5_tmp.broker_name = null;
copyOfout5_tmp.etl_date = null;
copyOfout5 = copyOfout5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfout5"
if(copyOfout5 != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout5");
					}
					



        whetherReject_tDBOutput_6 = false;
                            if(copyOfout5.broker_key == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(1, copyOfout5.broker_key);
}

                            if(copyOfout5.broker_name == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, copyOfout5.broker_name);
}

                            if(copyOfout5.etl_date != null) {
date_tDBOutput_6 = copyOfout5.etl_date.getTime();
if(date_tDBOutput_6 < year1_tDBOutput_6 || date_tDBOutput_6 >= year10000_tDBOutput_6) {
pstmt_tDBOutput_6.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_6.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_6));
}
} else {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_6.addBatch();
                    nb_line_tDBOutput_6++;

                      batchSizeCounter_tDBOutput_6++;
                if ( batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6) {
                try {
                        int countSum_tDBOutput_6 = 0;
                        for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
                            countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_6 = 0;
                    for(int countEach_tDBOutput_6: e.getUpdateCounts()) {
                        countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
                    }
                    insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_6 = 0;
            }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "copyOfout5"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

 



/**
 * [tRowGenerator_6 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_6 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

}
globalMap.put("tRowGenerator_6_NB_LINE",nb_line_tRowGenerator_6);

 

ok_Hash.put("tRowGenerator_6", true);
end_Hash.put("tRowGenerator_6", System.currentTimeMillis());




/**
 * [tRowGenerator_6 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



                try {
                		if (batchSizeCounter_tDBOutput_6 != 0) {
							int countSum_tDBOutput_6 = 0;
							
							for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
								countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_6 = 0;
					for(int countEach_tDBOutput_6: e.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					
            	    insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_6 = 0;
    		
	

        if(pstmt_tDBOutput_6 != null) {
			
				pstmt_tDBOutput_6.close();
				resourceMap.remove("pstmt_tDBOutput_6");
			
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout5");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRowGenerator_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_6 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

 



/**
 * [tRowGenerator_6 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_6_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer country_key;

				public Integer getCountry_key () {
					return this.country_key;
				}
				
			    public Integer fk_region_key;

				public Integer getFk_region_key () {
					return this.fk_region_key;
				}
				
			    public String country_name;

				public String getCountry_name () {
					return this.country_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.country_key = readInteger(dis);
					
						this.fk_region_key = readInteger(dis);
					
					this.country_name = readString(dis);
					
					this.etl_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.country_key,dos);
					
					// Integer
				
						writeInteger(this.fk_region_key,dos);
					
					// String
				
						writeString(this.country_name,dos);
					
					// java.util.Date
				
						writeDate(this.etl_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_key="+String.valueOf(country_key));
		sb.append(",fk_region_key="+String.valueOf(fk_region_key));
		sb.append(",country_name="+country_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();





	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tDBOutput_7 = 0;
		






int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;

int rejectedCount_tDBOutput_7=0;

String tableName_tDBOutput_7 = "country_dim";
boolean whetherReject_tDBOutput_7 = false;

java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar.getInstance();
calendar_tDBOutput_7.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_7 = calendar_tDBOutput_7.getTime().getTime();
calendar_tDBOutput_7.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_7 = calendar_tDBOutput_7.getTime().getTime();
long date_tDBOutput_7;

java.sql.Connection conn_tDBOutput_7 = null;
		String dbProperties_tDBOutput_7 = "noDatetimeStringSync=true";
		String url_tDBOutput_7 = null;
		if(dbProperties_tDBOutput_7 == null || dbProperties_tDBOutput_7.trim().length() == 0) {
			url_tDBOutput_7 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_7 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_7.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_7 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_7 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + properties_tDBOutput_7;
		}
		String driverClass_tDBOutput_7 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_7 = context.mysql_Login;
		

		
	final String decryptedPassword_tDBOutput_7 = context.mysql_Password; 

		String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
		java.lang.Class.forName(driverClass_tDBOutput_7);
		
		conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);
		
	
	resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
        conn_tDBOutput_7.setAutoCommit(false);
        int commitEvery_tDBOutput_7 = 10000;
        int commitCounter_tDBOutput_7 = 0;

int count_tDBOutput_7=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_7 = conn_tDBOutput_7.getMetaData();
                                boolean whetherExist_tDBOutput_7 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_7 = dbMetaData_tDBOutput_7.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_7.next()) {
                                        String table_tDBOutput_7 = rsTable_tDBOutput_7.getString("TABLE_NAME");
                                        if(table_tDBOutput_7.equalsIgnoreCase("country_dim")) {
                                            whetherExist_tDBOutput_7 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_7) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                        stmtDrop_tDBOutput_7.execute("DROP TABLE `" + tableName_tDBOutput_7 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                    stmtCreate_tDBOutput_7.execute("CREATE TABLE `" + tableName_tDBOutput_7 + "`(`country_key` INT(0)  ,`fk_region_key` INT(0)  ,`country_name` VARCHAR(0)  ,`etl_date` DATETIME )");
                                }

				String insert_tDBOutput_7 = "INSERT INTO `" + "country_dim" + "` (`country_key`,`fk_region_key`,`country_name`,`etl_date`) VALUES (?,?,?,?)";
		        int batchSize_tDBOutput_7 = 100;
	   			int batchSizeCounter_tDBOutput_7=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
		        resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);


 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tRowGenerator_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_7", false);
		start_Hash.put("tRowGenerator_7", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_7";

	
		int tos_count_tRowGenerator_7 = 0;
		


int nb_line_tRowGenerator_7 = 0;
int nb_max_row_tRowGenerator_7 = 1;


class tRowGenerator_7Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_7Randomizer randtRowGenerator_7 = new tRowGenerator_7Randomizer();
	
	for (int itRowGenerator_7=0; itRowGenerator_7<nb_max_row_tRowGenerator_7 ;itRowGenerator_7++) {
		row7.newColumn = randtRowGenerator_7.getRandomnewColumn();
		nb_line_tRowGenerator_7++;
		

 



/**
 * [tRowGenerator_7 begin ] stop
 */
	
	/**
	 * [tRowGenerator_7 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

 


	tos_count_tRowGenerator_7++;

/**
 * [tRowGenerator_7 main ] stop
 */
	
	/**
	 * [tRowGenerator_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

 



/**
 * [tRowGenerator_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'
copyOfout1_tmp.country_key = null;
copyOfout1_tmp.fk_region_key = null;
copyOfout1_tmp.country_name = null;
copyOfout1_tmp.etl_date = null;
copyOfout1 = copyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout1");
					}
					



        whetherReject_tDBOutput_7 = false;
                            if(copyOfout1.country_key == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(1, copyOfout1.country_key);
}

                            if(copyOfout1.fk_region_key == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(2, copyOfout1.fk_region_key);
}

                            if(copyOfout1.country_name == null) {
pstmt_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(3, copyOfout1.country_name);
}

                            if(copyOfout1.etl_date != null) {
date_tDBOutput_7 = copyOfout1.etl_date.getTime();
if(date_tDBOutput_7 < year1_tDBOutput_7 || date_tDBOutput_7 >= year10000_tDBOutput_7) {
pstmt_tDBOutput_7.setString(4, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_7.setTimestamp(4, new java.sql.Timestamp(date_tDBOutput_7));
}
} else {
pstmt_tDBOutput_7.setNull(4, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_7.addBatch();
                    nb_line_tDBOutput_7++;

                      batchSizeCounter_tDBOutput_7++;
                if ( batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7) {
                try {
                        int countSum_tDBOutput_7 = 0;
                        for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_7 = 0;
                    for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
                        countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                    }
                    insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_7 = 0;
            }
                commitCounter_tDBOutput_7++;

                if(commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {

                try {
                        int countSum_tDBOutput_7 = 0;
                        for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_7 = 0;
                    for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
                        countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                    }
                    insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_7.commit();
                    commitCounter_tDBOutput_7=0;

                }


 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

 



/**
 * [tRowGenerator_7 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_7 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

}
globalMap.put("tRowGenerator_7_NB_LINE",nb_line_tRowGenerator_7);

 

ok_Hash.put("tRowGenerator_7", true);
end_Hash.put("tRowGenerator_7", System.currentTimeMillis());




/**
 * [tRowGenerator_7 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



                try {
                		if (batchSizeCounter_tDBOutput_7 != 0) {
							int countSum_tDBOutput_7 = 0;
							
							for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
								countSum_tDBOutput_7 += (countEach_tDBOutput_7 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_7 = 0;
					for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
					
            	    insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_7 = 0;
    		
	

        if(pstmt_tDBOutput_7 != null) {
			
				pstmt_tDBOutput_7.close();
				resourceMap.remove("pstmt_tDBOutput_7");
			
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);
    	if (commitCounter_tDBOutput_7 > 0) {
    		
    		conn_tDBOutput_7.commit();
    		
    	}
    		
		
    	conn_tDBOutput_7 .close();
    	
    	resourceMap.put("finish_tDBOutput_7", true);
    	

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tRowGenerator_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_7 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

 



/**
 * [tRowGenerator_7 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_7") == null){
            java.sql.Connection ctn_tDBOutput_7 = null;
            if((ctn_tDBOutput_7 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_7")) != null){
                try {
                    ctn_tDBOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_7) {
                    String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :" + sqlEx_tDBOutput_7.getMessage();
                    System.err.println(errorMessage_tDBOutput_7);
                }
            }
        }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_7_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1_0Struct implements routines.system.IPersistableRow<copyOfout1_0Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer country_key;

				public Integer getCountry_key () {
					return this.country_key;
				}
				
			    public Integer fk_region_key;

				public Integer getFk_region_key () {
					return this.fk_region_key;
				}
				
			    public String country_name;

				public String getCountry_name () {
					return this.country_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.country_key = readInteger(dis);
					
						this.fk_region_key = readInteger(dis);
					
					this.country_name = readString(dis);
					
					this.etl_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.country_key,dos);
					
					// Integer
				
						writeInteger(this.fk_region_key,dos);
					
					// String
				
						writeString(this.country_name,dos);
					
					// java.util.Date
				
						writeDate(this.etl_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_key="+String.valueOf(country_key));
		sb.append(",fk_region_key="+String.valueOf(fk_region_key));
		sb.append(",country_name="+country_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
copyOfout1_0Struct copyOfout1_0 = new copyOfout1_0Struct();





	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1_0");
					}
				
		int tos_count_tDBOutput_8 = 0;
		






int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;

int rejectedCount_tDBOutput_8=0;

String tableName_tDBOutput_8 = "country_dim";
boolean whetherReject_tDBOutput_8 = false;

java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar.getInstance();
calendar_tDBOutput_8.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_8 = calendar_tDBOutput_8.getTime().getTime();
calendar_tDBOutput_8.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_8 = calendar_tDBOutput_8.getTime().getTime();
long date_tDBOutput_8;

java.sql.Connection conn_tDBOutput_8 = null;
		String dbProperties_tDBOutput_8 = "noDatetimeStringSync=true";
		String url_tDBOutput_8 = null;
		if(dbProperties_tDBOutput_8 == null || dbProperties_tDBOutput_8.trim().length() == 0) {
			url_tDBOutput_8 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_8 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_8.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_8 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_8 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + properties_tDBOutput_8;
		}
		String driverClass_tDBOutput_8 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_8 = context.mysql_Login;
		

		
	final String decryptedPassword_tDBOutput_8 = context.mysql_Password; 

		String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;
		java.lang.Class.forName(driverClass_tDBOutput_8);
		
		conn_tDBOutput_8 = java.sql.DriverManager.getConnection(url_tDBOutput_8, dbUser_tDBOutput_8, dbPwd_tDBOutput_8);
		
	
	resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
        conn_tDBOutput_8.setAutoCommit(false);
        int commitEvery_tDBOutput_8 = 10000;
        int commitCounter_tDBOutput_8 = 0;

int count_tDBOutput_8=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_8 = conn_tDBOutput_8.getMetaData();
                                boolean whetherExist_tDBOutput_8 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_8 = dbMetaData_tDBOutput_8.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_8.next()) {
                                        String table_tDBOutput_8 = rsTable_tDBOutput_8.getString("TABLE_NAME");
                                        if(table_tDBOutput_8.equalsIgnoreCase("country_dim")) {
                                            whetherExist_tDBOutput_8 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_8) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                        stmtDrop_tDBOutput_8.execute("DROP TABLE `" + tableName_tDBOutput_8 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                    stmtCreate_tDBOutput_8.execute("CREATE TABLE `" + tableName_tDBOutput_8 + "`(`country_key` INT(0)  ,`fk_region_key` INT(0)  ,`country_name` VARCHAR(0)  ,`etl_date` DATETIME )");
                                }

				String insert_tDBOutput_8 = "INSERT INTO `" + "country_dim" + "` (`country_key`,`fk_region_key`,`country_name`,`etl_date`) VALUES (?,?,?,?)";
		        int batchSize_tDBOutput_8 = 100;
	   			int batchSizeCounter_tDBOutput_8=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
		        resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);


 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1_0Struct copyOfout1_0_tmp = new copyOfout1_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tRowGenerator_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_8", false);
		start_Hash.put("tRowGenerator_8", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_8";

	
		int tos_count_tRowGenerator_8 = 0;
		


int nb_line_tRowGenerator_8 = 0;
int nb_max_row_tRowGenerator_8 = 1;


class tRowGenerator_8Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_8Randomizer randtRowGenerator_8 = new tRowGenerator_8Randomizer();
	
	for (int itRowGenerator_8=0; itRowGenerator_8<nb_max_row_tRowGenerator_8 ;itRowGenerator_8++) {
		row8.newColumn = randtRowGenerator_8.getRandomnewColumn();
		nb_line_tRowGenerator_8++;
		

 



/**
 * [tRowGenerator_8 begin ] stop
 */
	
	/**
	 * [tRowGenerator_8 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

 


	tos_count_tRowGenerator_8++;

/**
 * [tRowGenerator_8 main ] stop
 */
	
	/**
	 * [tRowGenerator_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

 



/**
 * [tRowGenerator_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfout1_0 = null;


// # Output table : 'copyOfout1_0'
copyOfout1_0_tmp.country_key = null;
copyOfout1_0_tmp.fk_region_key = null;
copyOfout1_0_tmp.country_name = null;
copyOfout1_0_tmp.etl_date = null;
copyOfout1_0 = copyOfout1_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfout1_0"
if(copyOfout1_0 != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout1_0");
					}
					



        whetherReject_tDBOutput_8 = false;
                            if(copyOfout1_0.country_key == null) {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setInt(1, copyOfout1_0.country_key);
}

                            if(copyOfout1_0.fk_region_key == null) {
pstmt_tDBOutput_8.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setInt(2, copyOfout1_0.fk_region_key);
}

                            if(copyOfout1_0.country_name == null) {
pstmt_tDBOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(3, copyOfout1_0.country_name);
}

                            if(copyOfout1_0.etl_date != null) {
date_tDBOutput_8 = copyOfout1_0.etl_date.getTime();
if(date_tDBOutput_8 < year1_tDBOutput_8 || date_tDBOutput_8 >= year10000_tDBOutput_8) {
pstmt_tDBOutput_8.setString(4, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_8.setTimestamp(4, new java.sql.Timestamp(date_tDBOutput_8));
}
} else {
pstmt_tDBOutput_8.setNull(4, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_8.addBatch();
                    nb_line_tDBOutput_8++;

                      batchSizeCounter_tDBOutput_8++;
                if ( batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8) {
                try {
                        int countSum_tDBOutput_8 = 0;
                        for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
                            countSum_tDBOutput_8 += (countEach_tDBOutput_8 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_8 = 0;
                    for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
                        countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                    }
                    insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_8 = 0;
            }
                commitCounter_tDBOutput_8++;

                if(commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {

                try {
                        int countSum_tDBOutput_8 = 0;
                        for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
                            countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_8 = 0;
                    for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
                        countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                    }
                    insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_8.commit();
                    commitCounter_tDBOutput_8=0;

                }


 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "copyOfout1_0"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

 



/**
 * [tRowGenerator_8 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_8 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

}
globalMap.put("tRowGenerator_8_NB_LINE",nb_line_tRowGenerator_8);

 

ok_Hash.put("tRowGenerator_8", true);
end_Hash.put("tRowGenerator_8", System.currentTimeMillis());




/**
 * [tRowGenerator_8 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



                try {
                		if (batchSizeCounter_tDBOutput_8 != 0) {
							int countSum_tDBOutput_8 = 0;
							
							for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
								countSum_tDBOutput_8 += (countEach_tDBOutput_8 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_8 = 0;
					for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
					
            	    insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_8 = 0;
    		
	

        if(pstmt_tDBOutput_8 != null) {
			
				pstmt_tDBOutput_8.close();
				resourceMap.remove("pstmt_tDBOutput_8");
			
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);
    	if (commitCounter_tDBOutput_8 > 0) {
    		
    		conn_tDBOutput_8.commit();
    		
    	}
    		
		
    	conn_tDBOutput_8 .close();
    	
    	resourceMap.put("finish_tDBOutput_8", true);
    	

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1_0");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tRowGenerator_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_8 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

 



/**
 * [tRowGenerator_8 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_8") == null){
            java.sql.Connection ctn_tDBOutput_8 = null;
            if((ctn_tDBOutput_8 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_8")) != null){
                try {
                    ctn_tDBOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_8) {
                    String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :" + sqlEx_tDBOutput_8.getMessage();
                    System.err.println(errorMessage_tDBOutput_8);
                }
            }
        }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_8_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer region_key;

				public Integer getRegion_key () {
					return this.region_key;
				}
				
			    public String region_name;

				public String getRegion_name () {
					return this.region_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.region_key = readInteger(dis);
					
					this.region_name = readString(dis);
					
					this.etl_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.region_key,dos);
					
					// String
				
						writeString(this.region_name,dos);
					
					// java.util.Date
				
						writeDate(this.etl_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("region_key="+String.valueOf(region_key));
		sb.append(",region_name="+region_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
copyOfcopyOfout1Struct copyOfcopyOfout1 = new copyOfcopyOfout1Struct();





	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfout1");
					}
				
		int tos_count_tDBOutput_9 = 0;
		






int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;

int rejectedCount_tDBOutput_9=0;

String tableName_tDBOutput_9 = "region_dim";
boolean whetherReject_tDBOutput_9 = false;

java.util.Calendar calendar_tDBOutput_9 = java.util.Calendar.getInstance();
calendar_tDBOutput_9.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_9 = calendar_tDBOutput_9.getTime().getTime();
calendar_tDBOutput_9.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_9 = calendar_tDBOutput_9.getTime().getTime();
long date_tDBOutput_9;

java.sql.Connection conn_tDBOutput_9 = null;
		String dbProperties_tDBOutput_9 = "noDatetimeStringSync=true";
		String url_tDBOutput_9 = null;
		if(dbProperties_tDBOutput_9 == null || dbProperties_tDBOutput_9.trim().length() == 0) {
			url_tDBOutput_9 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_9 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_9.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_9 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_9 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + properties_tDBOutput_9;
		}
		String driverClass_tDBOutput_9 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_9 = context.mysql_Login;
		

		
	final String decryptedPassword_tDBOutput_9 = context.mysql_Password; 

		String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;
		java.lang.Class.forName(driverClass_tDBOutput_9);
		
		conn_tDBOutput_9 = java.sql.DriverManager.getConnection(url_tDBOutput_9, dbUser_tDBOutput_9, dbPwd_tDBOutput_9);
		
	
	resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);
        conn_tDBOutput_9.setAutoCommit(false);
        int commitEvery_tDBOutput_9 = 10000;
        int commitCounter_tDBOutput_9 = 0;

int count_tDBOutput_9=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_9 = conn_tDBOutput_9.getMetaData();
                                boolean whetherExist_tDBOutput_9 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_9 = dbMetaData_tDBOutput_9.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_9.next()) {
                                        String table_tDBOutput_9 = rsTable_tDBOutput_9.getString("TABLE_NAME");
                                        if(table_tDBOutput_9.equalsIgnoreCase("region_dim")) {
                                            whetherExist_tDBOutput_9 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_9) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                                        stmtDrop_tDBOutput_9.execute("DROP TABLE `" + tableName_tDBOutput_9 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                                    stmtCreate_tDBOutput_9.execute("CREATE TABLE `" + tableName_tDBOutput_9 + "`(`region_key` INT(0)  ,`region_name` VARCHAR(0)  ,`etl_date` DATETIME )");
                                }

				String insert_tDBOutput_9 = "INSERT INTO `" + "region_dim" + "` (`region_key`,`region_name`,`etl_date`) VALUES (?,?,?)";
		        int batchSize_tDBOutput_9 = 100;
	   			int batchSizeCounter_tDBOutput_9=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
		        resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);


 



/**
 * [tDBOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfout1Struct copyOfcopyOfout1_tmp = new copyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tRowGenerator_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_9", false);
		start_Hash.put("tRowGenerator_9", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_9";

	
		int tos_count_tRowGenerator_9 = 0;
		


int nb_line_tRowGenerator_9 = 0;
int nb_max_row_tRowGenerator_9 = 1;


class tRowGenerator_9Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_9Randomizer randtRowGenerator_9 = new tRowGenerator_9Randomizer();
	
	for (int itRowGenerator_9=0; itRowGenerator_9<nb_max_row_tRowGenerator_9 ;itRowGenerator_9++) {
		row9.newColumn = randtRowGenerator_9.getRandomnewColumn();
		nb_line_tRowGenerator_9++;
		

 



/**
 * [tRowGenerator_9 begin ] stop
 */
	
	/**
	 * [tRowGenerator_9 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_9";

	

 


	tos_count_tRowGenerator_9++;

/**
 * [tRowGenerator_9 main ] stop
 */
	
	/**
	 * [tRowGenerator_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_9";

	

 



/**
 * [tRowGenerator_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfout1'
copyOfcopyOfout1_tmp.region_key = null;
copyOfcopyOfout1_tmp.region_name = null;
copyOfcopyOfout1_tmp.etl_date = null;
copyOfcopyOfout1 = copyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout1"
if(copyOfcopyOfout1 != null) { 



	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfout1");
					}
					



        whetherReject_tDBOutput_9 = false;
                            if(copyOfcopyOfout1.region_key == null) {
pstmt_tDBOutput_9.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_9.setInt(1, copyOfcopyOfout1.region_key);
}

                            if(copyOfcopyOfout1.region_name == null) {
pstmt_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(2, copyOfcopyOfout1.region_name);
}

                            if(copyOfcopyOfout1.etl_date != null) {
date_tDBOutput_9 = copyOfcopyOfout1.etl_date.getTime();
if(date_tDBOutput_9 < year1_tDBOutput_9 || date_tDBOutput_9 >= year10000_tDBOutput_9) {
pstmt_tDBOutput_9.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_9.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_9));
}
} else {
pstmt_tDBOutput_9.setNull(3, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_9.addBatch();
                    nb_line_tDBOutput_9++;

                      batchSizeCounter_tDBOutput_9++;
                if ( batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9) {
                try {
                        int countSum_tDBOutput_9 = 0;
                        for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
                            countSum_tDBOutput_9 += (countEach_tDBOutput_9 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_9 = 0;
                    for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
                        countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
                    }
                    insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_9 = 0;
            }
                commitCounter_tDBOutput_9++;

                if(commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {

                try {
                        int countSum_tDBOutput_9 = 0;
                        for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
                            countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_9 = 0;
                    for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
                        countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
                    }
                    insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_9.commit();
                    commitCounter_tDBOutput_9=0;

                }


 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout1"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_9";

	

 



/**
 * [tRowGenerator_9 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_9 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_9";

	

}
globalMap.put("tRowGenerator_9_NB_LINE",nb_line_tRowGenerator_9);

 

ok_Hash.put("tRowGenerator_9", true);
end_Hash.put("tRowGenerator_9", System.currentTimeMillis());




/**
 * [tRowGenerator_9 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



                try {
                		if (batchSizeCounter_tDBOutput_9 != 0) {
							int countSum_tDBOutput_9 = 0;
							
							for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
								countSum_tDBOutput_9 += (countEach_tDBOutput_9 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_9 = 0;
					for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
					
            	    insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_9 = 0;
    		
	

        if(pstmt_tDBOutput_9 != null) {
			
				pstmt_tDBOutput_9.close();
				resourceMap.remove("pstmt_tDBOutput_9");
			
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);
    	if (commitCounter_tDBOutput_9 > 0) {
    		
    		conn_tDBOutput_9.commit();
    		
    	}
    		
		
    	conn_tDBOutput_9 .close();
    	
    	resourceMap.put("finish_tDBOutput_9", true);
    	

	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());




/**
 * [tDBOutput_9 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRowGenerator_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_9 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_9";

	

 



/**
 * [tRowGenerator_9 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_9") == null){
            java.sql.Connection ctn_tDBOutput_9 = null;
            if((ctn_tDBOutput_9 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_9")) != null){
                try {
                    ctn_tDBOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_9) {
                    String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :" + sqlEx_tDBOutput_9.getMessage();
                    System.err.println(errorMessage_tDBOutput_9);
                }
            }
        }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_9_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1_1Struct implements routines.system.IPersistableRow<copyOfout1_1Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer cp_key;

				public Integer getCp_key () {
					return this.cp_key;
				}
				
			    public String cp_name;

				public String getCp_name () {
					return this.cp_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.cp_key = readInteger(dis);
					
					this.cp_name = readString(dis);
					
					this.etl_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.cp_key,dos);
					
					// String
				
						writeString(this.cp_name,dos);
					
					// java.util.Date
				
						writeDate(this.etl_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cp_key="+String.valueOf(cp_key));
		sb.append(",cp_name="+cp_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
copyOfout1_1Struct copyOfout1_1 = new copyOfout1_1Struct();





	
	/**
	 * [tDBOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_10", false);
		start_Hash.put("tDBOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1_1");
					}
				
		int tos_count_tDBOutput_10 = 0;
		






int nb_line_tDBOutput_10 = 0;
int nb_line_update_tDBOutput_10 = 0;
int nb_line_inserted_tDBOutput_10 = 0;
int nb_line_deleted_tDBOutput_10 = 0;
int nb_line_rejected_tDBOutput_10 = 0;

int deletedCount_tDBOutput_10=0;
int updatedCount_tDBOutput_10=0;
int insertedCount_tDBOutput_10=0;

int rejectedCount_tDBOutput_10=0;

String tableName_tDBOutput_10 = "cp_dim";
boolean whetherReject_tDBOutput_10 = false;

java.util.Calendar calendar_tDBOutput_10 = java.util.Calendar.getInstance();
calendar_tDBOutput_10.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_10 = calendar_tDBOutput_10.getTime().getTime();
calendar_tDBOutput_10.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_10 = calendar_tDBOutput_10.getTime().getTime();
long date_tDBOutput_10;

java.sql.Connection conn_tDBOutput_10 = null;
		String dbProperties_tDBOutput_10 = "noDatetimeStringSync=true";
		String url_tDBOutput_10 = null;
		if(dbProperties_tDBOutput_10 == null || dbProperties_tDBOutput_10.trim().length() == 0) {
			url_tDBOutput_10 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_10 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_10.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_10 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_10 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + properties_tDBOutput_10;
		}
		String driverClass_tDBOutput_10 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_10 = context.mysql_Login;
		

		
	final String decryptedPassword_tDBOutput_10 = context.mysql_Password; 

		String dbPwd_tDBOutput_10 = decryptedPassword_tDBOutput_10;
		java.lang.Class.forName(driverClass_tDBOutput_10);
		
		conn_tDBOutput_10 = java.sql.DriverManager.getConnection(url_tDBOutput_10, dbUser_tDBOutput_10, dbPwd_tDBOutput_10);
		
	
	resourceMap.put("conn_tDBOutput_10", conn_tDBOutput_10);
        conn_tDBOutput_10.setAutoCommit(false);
        int commitEvery_tDBOutput_10 = 10000;
        int commitCounter_tDBOutput_10 = 0;

int count_tDBOutput_10=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_10 = conn_tDBOutput_10.getMetaData();
                                boolean whetherExist_tDBOutput_10 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_10 = dbMetaData_tDBOutput_10.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_10.next()) {
                                        String table_tDBOutput_10 = rsTable_tDBOutput_10.getString("TABLE_NAME");
                                        if(table_tDBOutput_10.equalsIgnoreCase("cp_dim")) {
                                            whetherExist_tDBOutput_10 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_10) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                                        stmtDrop_tDBOutput_10.execute("DROP TABLE `" + tableName_tDBOutput_10 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                                    stmtCreate_tDBOutput_10.execute("CREATE TABLE `" + tableName_tDBOutput_10 + "`(`cp_key` INT(0)  ,`cp_name` VARCHAR(0)  ,`etl_date` DATETIME )");
                                }

				String insert_tDBOutput_10 = "INSERT INTO `" + "cp_dim" + "` (`cp_key`,`cp_name`,`etl_date`) VALUES (?,?,?)";
		        int batchSize_tDBOutput_10 = 100;
	   			int batchSizeCounter_tDBOutput_10=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
		        resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);


 



/**
 * [tDBOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1_1Struct copyOfout1_1_tmp = new copyOfout1_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tRowGenerator_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_10", false);
		start_Hash.put("tRowGenerator_10", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_10";

	
		int tos_count_tRowGenerator_10 = 0;
		


int nb_line_tRowGenerator_10 = 0;
int nb_max_row_tRowGenerator_10 = 1;


class tRowGenerator_10Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_10Randomizer randtRowGenerator_10 = new tRowGenerator_10Randomizer();
	
	for (int itRowGenerator_10=0; itRowGenerator_10<nb_max_row_tRowGenerator_10 ;itRowGenerator_10++) {
		row10.newColumn = randtRowGenerator_10.getRandomnewColumn();
		nb_line_tRowGenerator_10++;
		

 



/**
 * [tRowGenerator_10 begin ] stop
 */
	
	/**
	 * [tRowGenerator_10 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_10";

	

 


	tos_count_tRowGenerator_10++;

/**
 * [tRowGenerator_10 main ] stop
 */
	
	/**
	 * [tRowGenerator_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_10";

	

 



/**
 * [tRowGenerator_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

copyOfout1_1 = null;


// # Output table : 'copyOfout1_1'
copyOfout1_1_tmp.cp_key = null;
copyOfout1_1_tmp.cp_name = null;
copyOfout1_1_tmp.etl_date = null;
copyOfout1_1 = copyOfout1_1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "copyOfout1_1"
if(copyOfout1_1 != null) { 



	
	/**
	 * [tDBOutput_10 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout1_1");
					}
					



        whetherReject_tDBOutput_10 = false;
                            if(copyOfout1_1.cp_key == null) {
pstmt_tDBOutput_10.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_10.setInt(1, copyOfout1_1.cp_key);
}

                            if(copyOfout1_1.cp_name == null) {
pstmt_tDBOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(2, copyOfout1_1.cp_name);
}

                            if(copyOfout1_1.etl_date != null) {
date_tDBOutput_10 = copyOfout1_1.etl_date.getTime();
if(date_tDBOutput_10 < year1_tDBOutput_10 || date_tDBOutput_10 >= year10000_tDBOutput_10) {
pstmt_tDBOutput_10.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_10.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_10));
}
} else {
pstmt_tDBOutput_10.setNull(3, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_10.addBatch();
                    nb_line_tDBOutput_10++;

                      batchSizeCounter_tDBOutput_10++;
                if ( batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10) {
                try {
                        int countSum_tDBOutput_10 = 0;
                        for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
                            countSum_tDBOutput_10 += (countEach_tDBOutput_10 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_10 = 0;
                    for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
                        countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
                    }
                    insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_10 = 0;
            }
                commitCounter_tDBOutput_10++;

                if(commitEvery_tDBOutput_10 <= commitCounter_tDBOutput_10) {

                try {
                        int countSum_tDBOutput_10 = 0;
                        for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
                            countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_10 = 0;
                    for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
                        countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
                    }
                    insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_10.commit();
                    commitCounter_tDBOutput_10=0;

                }


 


	tos_count_tDBOutput_10++;

/**
 * [tDBOutput_10 main ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_end ] stop
 */

} // End of branch "copyOfout1_1"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_10";

	

 



/**
 * [tRowGenerator_10 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_10 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_10";

	

}
globalMap.put("tRowGenerator_10_NB_LINE",nb_line_tRowGenerator_10);

 

ok_Hash.put("tRowGenerator_10", true);
end_Hash.put("tRowGenerator_10", System.currentTimeMillis());




/**
 * [tRowGenerator_10 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tDBOutput_10 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



                try {
                		if (batchSizeCounter_tDBOutput_10 != 0) {
							int countSum_tDBOutput_10 = 0;
							
							for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
								countSum_tDBOutput_10 += (countEach_tDBOutput_10 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_10 = 0;
					for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
					
            	    insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_10 = 0;
    		
	

        if(pstmt_tDBOutput_10 != null) {
			
				pstmt_tDBOutput_10.close();
				resourceMap.remove("pstmt_tDBOutput_10");
			
        }
    resourceMap.put("statementClosed_tDBOutput_10", true);
    	if (commitCounter_tDBOutput_10 > 0) {
    		
    		conn_tDBOutput_10.commit();
    		
    	}
    		
		
    	conn_tDBOutput_10 .close();
    	
    	resourceMap.put("finish_tDBOutput_10", true);
    	

	nb_line_deleted_tDBOutput_10=nb_line_deleted_tDBOutput_10+ deletedCount_tDBOutput_10;
	nb_line_update_tDBOutput_10=nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
	nb_line_inserted_tDBOutput_10=nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
	nb_line_rejected_tDBOutput_10=nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;
	
        globalMap.put("tDBOutput_10_NB_LINE",nb_line_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_UPDATED",nb_line_update_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_DELETED",nb_line_deleted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1_1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_10", true);
end_Hash.put("tDBOutput_10", System.currentTimeMillis());




/**
 * [tDBOutput_10 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tRowGenerator_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_10 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_10";

	

 



/**
 * [tRowGenerator_10 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
                if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_10")) != null) {
                    pstmtToClose_tDBOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_10") == null){
            java.sql.Connection ctn_tDBOutput_10 = null;
            if((ctn_tDBOutput_10 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_10")) != null){
                try {
                    ctn_tDBOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_10) {
                    String errorMessage_tDBOutput_10 = "failed to close the connection in tDBOutput_10 :" + sqlEx_tDBOutput_10.getMessage();
                    System.err.println(errorMessage_tDBOutput_10);
                }
            }
        }
    }
 



/**
 * [tDBOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_10_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1_2Struct implements routines.system.IPersistableRow<copyOfout1_2Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer prod_quality_key;

				public Integer getProd_quality_key () {
					return this.prod_quality_key;
				}
				
			    public Integer fk_prod_key;

				public Integer getFk_prod_key () {
					return this.fk_prod_key;
				}
				
			    public String prod_quality_name;

				public String getProd_quality_name () {
					return this.prod_quality_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.prod_quality_key = readInteger(dis);
					
						this.fk_prod_key = readInteger(dis);
					
					this.prod_quality_name = readString(dis);
					
					this.etl_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.prod_quality_key,dos);
					
					// Integer
				
						writeInteger(this.fk_prod_key,dos);
					
					// String
				
						writeString(this.prod_quality_name,dos);
					
					// java.util.Date
				
						writeDate(this.etl_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prod_quality_key="+String.valueOf(prod_quality_key));
		sb.append(",fk_prod_key="+String.valueOf(fk_prod_key));
		sb.append(",prod_quality_name="+prod_quality_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
copyOfout1_2Struct copyOfout1_2 = new copyOfout1_2Struct();





	
	/**
	 * [tDBOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_11", false);
		start_Hash.put("tDBOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1_2");
					}
				
		int tos_count_tDBOutput_11 = 0;
		






int nb_line_tDBOutput_11 = 0;
int nb_line_update_tDBOutput_11 = 0;
int nb_line_inserted_tDBOutput_11 = 0;
int nb_line_deleted_tDBOutput_11 = 0;
int nb_line_rejected_tDBOutput_11 = 0;

int deletedCount_tDBOutput_11=0;
int updatedCount_tDBOutput_11=0;
int insertedCount_tDBOutput_11=0;

int rejectedCount_tDBOutput_11=0;

String tableName_tDBOutput_11 = "prod_quality_dim";
boolean whetherReject_tDBOutput_11 = false;

java.util.Calendar calendar_tDBOutput_11 = java.util.Calendar.getInstance();
calendar_tDBOutput_11.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_11 = calendar_tDBOutput_11.getTime().getTime();
calendar_tDBOutput_11.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_11 = calendar_tDBOutput_11.getTime().getTime();
long date_tDBOutput_11;

java.sql.Connection conn_tDBOutput_11 = null;
		String dbProperties_tDBOutput_11 = "noDatetimeStringSync=true";
		String url_tDBOutput_11 = null;
		if(dbProperties_tDBOutput_11 == null || dbProperties_tDBOutput_11.trim().length() == 0) {
			url_tDBOutput_11 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_11 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_11.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_11 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_11 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + properties_tDBOutput_11;
		}
		String driverClass_tDBOutput_11 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_11 = context.mysql_Login;
		

		
	final String decryptedPassword_tDBOutput_11 = context.mysql_Password; 

		String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;
		java.lang.Class.forName(driverClass_tDBOutput_11);
		
		conn_tDBOutput_11 = java.sql.DriverManager.getConnection(url_tDBOutput_11, dbUser_tDBOutput_11, dbPwd_tDBOutput_11);
		
	
	resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);
        conn_tDBOutput_11.setAutoCommit(false);
        int commitEvery_tDBOutput_11 = 10000;
        int commitCounter_tDBOutput_11 = 0;

int count_tDBOutput_11=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_11 = conn_tDBOutput_11.getMetaData();
                                boolean whetherExist_tDBOutput_11 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_11 = dbMetaData_tDBOutput_11.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_11.next()) {
                                        String table_tDBOutput_11 = rsTable_tDBOutput_11.getString("TABLE_NAME");
                                        if(table_tDBOutput_11.equalsIgnoreCase("prod_quality_dim")) {
                                            whetherExist_tDBOutput_11 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_11) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                                        stmtDrop_tDBOutput_11.execute("DROP TABLE `" + tableName_tDBOutput_11 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                                    stmtCreate_tDBOutput_11.execute("CREATE TABLE `" + tableName_tDBOutput_11 + "`(`prod_quality_key` INT(0)  ,`fk_prod_key` INT(0)  ,`prod_quality_name` VARCHAR(0)  ,`etl_date` DATETIME )");
                                }

				String insert_tDBOutput_11 = "INSERT INTO `" + "prod_quality_dim" + "` (`prod_quality_key`,`fk_prod_key`,`prod_quality_name`,`etl_date`) VALUES (?,?,?,?)";
		        int batchSize_tDBOutput_11 = 100;
	   			int batchSizeCounter_tDBOutput_11=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
		        resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);


 



/**
 * [tDBOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1_2Struct copyOfout1_2_tmp = new copyOfout1_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tRowGenerator_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_11", false);
		start_Hash.put("tRowGenerator_11", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_11";

	
		int tos_count_tRowGenerator_11 = 0;
		


int nb_line_tRowGenerator_11 = 0;
int nb_max_row_tRowGenerator_11 = 1;


class tRowGenerator_11Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_11Randomizer randtRowGenerator_11 = new tRowGenerator_11Randomizer();
	
	for (int itRowGenerator_11=0; itRowGenerator_11<nb_max_row_tRowGenerator_11 ;itRowGenerator_11++) {
		row11.newColumn = randtRowGenerator_11.getRandomnewColumn();
		nb_line_tRowGenerator_11++;
		

 



/**
 * [tRowGenerator_11 begin ] stop
 */
	
	/**
	 * [tRowGenerator_11 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_11";

	

 


	tos_count_tRowGenerator_11++;

/**
 * [tRowGenerator_11 main ] stop
 */
	
	/**
	 * [tRowGenerator_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_11";

	

 



/**
 * [tRowGenerator_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

copyOfout1_2 = null;


// # Output table : 'copyOfout1_2'
copyOfout1_2_tmp.prod_quality_key = null;
copyOfout1_2_tmp.fk_prod_key = null;
copyOfout1_2_tmp.prod_quality_name = null;
copyOfout1_2_tmp.etl_date = null;
copyOfout1_2 = copyOfout1_2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "copyOfout1_2"
if(copyOfout1_2 != null) { 



	
	/**
	 * [tDBOutput_11 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout1_2");
					}
					



        whetherReject_tDBOutput_11 = false;
                            if(copyOfout1_2.prod_quality_key == null) {
pstmt_tDBOutput_11.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_11.setInt(1, copyOfout1_2.prod_quality_key);
}

                            if(copyOfout1_2.fk_prod_key == null) {
pstmt_tDBOutput_11.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_11.setInt(2, copyOfout1_2.fk_prod_key);
}

                            if(copyOfout1_2.prod_quality_name == null) {
pstmt_tDBOutput_11.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(3, copyOfout1_2.prod_quality_name);
}

                            if(copyOfout1_2.etl_date != null) {
date_tDBOutput_11 = copyOfout1_2.etl_date.getTime();
if(date_tDBOutput_11 < year1_tDBOutput_11 || date_tDBOutput_11 >= year10000_tDBOutput_11) {
pstmt_tDBOutput_11.setString(4, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_11.setTimestamp(4, new java.sql.Timestamp(date_tDBOutput_11));
}
} else {
pstmt_tDBOutput_11.setNull(4, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_11.addBatch();
                    nb_line_tDBOutput_11++;

                      batchSizeCounter_tDBOutput_11++;
                if ( batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11) {
                try {
                        int countSum_tDBOutput_11 = 0;
                        for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
                            countSum_tDBOutput_11 += (countEach_tDBOutput_11 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_11 = 0;
                    for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
                        countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
                    }
                    insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_11 = 0;
            }
                commitCounter_tDBOutput_11++;

                if(commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {

                try {
                        int countSum_tDBOutput_11 = 0;
                        for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
                            countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_11 = 0;
                    for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
                        countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
                    }
                    insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_11.commit();
                    commitCounter_tDBOutput_11=0;

                }


 


	tos_count_tDBOutput_11++;

/**
 * [tDBOutput_11 main ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_end ] stop
 */

} // End of branch "copyOfout1_2"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_11";

	

 



/**
 * [tRowGenerator_11 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_11 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_11";

	

}
globalMap.put("tRowGenerator_11_NB_LINE",nb_line_tRowGenerator_11);

 

ok_Hash.put("tRowGenerator_11", true);
end_Hash.put("tRowGenerator_11", System.currentTimeMillis());




/**
 * [tRowGenerator_11 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tDBOutput_11 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



                try {
                		if (batchSizeCounter_tDBOutput_11 != 0) {
							int countSum_tDBOutput_11 = 0;
							
							for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
								countSum_tDBOutput_11 += (countEach_tDBOutput_11 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_11 = 0;
					for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
					
            	    insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_11 = 0;
    		
	

        if(pstmt_tDBOutput_11 != null) {
			
				pstmt_tDBOutput_11.close();
				resourceMap.remove("pstmt_tDBOutput_11");
			
        }
    resourceMap.put("statementClosed_tDBOutput_11", true);
    	if (commitCounter_tDBOutput_11 > 0) {
    		
    		conn_tDBOutput_11.commit();
    		
    	}
    		
		
    	conn_tDBOutput_11 .close();
    	
    	resourceMap.put("finish_tDBOutput_11", true);
    	

	nb_line_deleted_tDBOutput_11=nb_line_deleted_tDBOutput_11+ deletedCount_tDBOutput_11;
	nb_line_update_tDBOutput_11=nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
	nb_line_inserted_tDBOutput_11=nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
	nb_line_rejected_tDBOutput_11=nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;
	
        globalMap.put("tDBOutput_11_NB_LINE",nb_line_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_UPDATED",nb_line_update_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_DELETED",nb_line_deleted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1_2");
			  	}
			  	
 

ok_Hash.put("tDBOutput_11", true);
end_Hash.put("tDBOutput_11", System.currentTimeMillis());




/**
 * [tDBOutput_11 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tRowGenerator_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_11 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_11";

	

 



/**
 * [tRowGenerator_11 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
                if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_11")) != null) {
                    pstmtToClose_tDBOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_11") == null){
            java.sql.Connection ctn_tDBOutput_11 = null;
            if((ctn_tDBOutput_11 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_11")) != null){
                try {
                    ctn_tDBOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_11) {
                    String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :" + sqlEx_tDBOutput_11.getMessage();
                    System.err.println(errorMessage_tDBOutput_11);
                }
            }
        }
    }
 



/**
 * [tDBOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_11_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1_3Struct implements routines.system.IPersistableRow<copyOfout1_3Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public Integer profit_center_key;

				public Integer getProfit_center_key () {
					return this.profit_center_key;
				}
				
			    public String profit_center_name;

				public String getProfit_center_name () {
					return this.profit_center_name;
				}
				
			    public java.util.Date etl_date;

				public java.util.Date getEtl_date () {
					return this.etl_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
						this.profit_center_key = readInteger(dis);
					
					this.profit_center_name = readString(dis);
					
					this.etl_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.profit_center_key,dos);
					
					// String
				
						writeString(this.profit_center_name,dos);
					
					// java.util.Date
				
						writeDate(this.etl_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("profit_center_key="+String.valueOf(profit_center_key));
		sb.append(",profit_center_name="+profit_center_name);
		sb.append(",etl_date="+String.valueOf(etl_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_CONT_ETL_utils = new byte[0];
    static byte[] commonByteArray_CONT_ETL_utils = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONT_ETL_utils.length) {
				if(length < 1024 && commonByteArray_CONT_ETL_utils.length == 0) {
   					commonByteArray_CONT_ETL_utils = new byte[1024];
				} else {
   					commonByteArray_CONT_ETL_utils = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONT_ETL_utils, 0, length);
			strReturn = new String(commonByteArray_CONT_ETL_utils, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONT_ETL_utils) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
copyOfout1_3Struct copyOfout1_3 = new copyOfout1_3Struct();





	
	/**
	 * [tDBOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_12", false);
		start_Hash.put("tDBOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1_3");
					}
				
		int tos_count_tDBOutput_12 = 0;
		






int nb_line_tDBOutput_12 = 0;
int nb_line_update_tDBOutput_12 = 0;
int nb_line_inserted_tDBOutput_12 = 0;
int nb_line_deleted_tDBOutput_12 = 0;
int nb_line_rejected_tDBOutput_12 = 0;

int deletedCount_tDBOutput_12=0;
int updatedCount_tDBOutput_12=0;
int insertedCount_tDBOutput_12=0;

int rejectedCount_tDBOutput_12=0;

String tableName_tDBOutput_12 = "profit_center_dim";
boolean whetherReject_tDBOutput_12 = false;

java.util.Calendar calendar_tDBOutput_12 = java.util.Calendar.getInstance();
calendar_tDBOutput_12.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_12 = calendar_tDBOutput_12.getTime().getTime();
calendar_tDBOutput_12.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_12 = calendar_tDBOutput_12.getTime().getTime();
long date_tDBOutput_12;

java.sql.Connection conn_tDBOutput_12 = null;
		String dbProperties_tDBOutput_12 = "noDatetimeStringSync=true";
		String url_tDBOutput_12 = null;
		if(dbProperties_tDBOutput_12 == null || dbProperties_tDBOutput_12.trim().length() == 0) {
			url_tDBOutput_12 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_12 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_12.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_12 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_12 = "jdbc:mysql://" + context.mysql_Server + ":" + "3306" + "/" + context.mysql_Database + "?" + properties_tDBOutput_12;
		}
		String driverClass_tDBOutput_12 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_12 = context.mysql_Login;
		

		
	final String decryptedPassword_tDBOutput_12 = context.mysql_Password; 

		String dbPwd_tDBOutput_12 = decryptedPassword_tDBOutput_12;
		java.lang.Class.forName(driverClass_tDBOutput_12);
		
		conn_tDBOutput_12 = java.sql.DriverManager.getConnection(url_tDBOutput_12, dbUser_tDBOutput_12, dbPwd_tDBOutput_12);
		
	
	resourceMap.put("conn_tDBOutput_12", conn_tDBOutput_12);
        conn_tDBOutput_12.setAutoCommit(false);
        int commitEvery_tDBOutput_12 = 10000;
        int commitCounter_tDBOutput_12 = 0;

int count_tDBOutput_12=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_12 = conn_tDBOutput_12.getMetaData();
                                boolean whetherExist_tDBOutput_12 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_12 = dbMetaData_tDBOutput_12.getTables(context.mysql_Database, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_12.next()) {
                                        String table_tDBOutput_12 = rsTable_tDBOutput_12.getString("TABLE_NAME");
                                        if(table_tDBOutput_12.equalsIgnoreCase("profit_center_dim")) {
                                            whetherExist_tDBOutput_12 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_12) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
                                        stmtDrop_tDBOutput_12.execute("DROP TABLE `" + tableName_tDBOutput_12 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
                                    stmtCreate_tDBOutput_12.execute("CREATE TABLE `" + tableName_tDBOutput_12 + "`(`profit_center_key` INT(0)  ,`profit_center_name` VARCHAR(0)  ,`etl_date` DATETIME )");
                                }

				String insert_tDBOutput_12 = "INSERT INTO `" + "profit_center_dim" + "` (`profit_center_key`,`profit_center_name`,`etl_date`) VALUES (?,?,?)";
		        int batchSize_tDBOutput_12 = 100;
	   			int batchSizeCounter_tDBOutput_12=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(insert_tDBOutput_12);
		        resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);


 



/**
 * [tDBOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1_3Struct copyOfout1_3_tmp = new copyOfout1_3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tRowGenerator_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_12", false);
		start_Hash.put("tRowGenerator_12", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_12";

	
		int tos_count_tRowGenerator_12 = 0;
		


int nb_line_tRowGenerator_12 = 0;
int nb_max_row_tRowGenerator_12 = 1;


class tRowGenerator_12Randomizer {
	public String getRandomnewColumn() {
		
		return TalendString.getAsciiRandomString(6);
		
	}
}
	tRowGenerator_12Randomizer randtRowGenerator_12 = new tRowGenerator_12Randomizer();
	
	for (int itRowGenerator_12=0; itRowGenerator_12<nb_max_row_tRowGenerator_12 ;itRowGenerator_12++) {
		row12.newColumn = randtRowGenerator_12.getRandomnewColumn();
		nb_line_tRowGenerator_12++;
		

 



/**
 * [tRowGenerator_12 begin ] stop
 */
	
	/**
	 * [tRowGenerator_12 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_12";

	

 


	tos_count_tRowGenerator_12++;

/**
 * [tRowGenerator_12 main ] stop
 */
	
	/**
	 * [tRowGenerator_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_12";

	

 



/**
 * [tRowGenerator_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

copyOfout1_3 = null;


// # Output table : 'copyOfout1_3'
copyOfout1_3_tmp.profit_center_key = null;
copyOfout1_3_tmp.profit_center_name = null;
copyOfout1_3_tmp.etl_date = null;
copyOfout1_3 = copyOfout1_3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "copyOfout1_3"
if(copyOfout1_3 != null) { 



	
	/**
	 * [tDBOutput_12 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout1_3");
					}
					



        whetherReject_tDBOutput_12 = false;
                            if(copyOfout1_3.profit_center_key == null) {
pstmt_tDBOutput_12.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_12.setInt(1, copyOfout1_3.profit_center_key);
}

                            if(copyOfout1_3.profit_center_name == null) {
pstmt_tDBOutput_12.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(2, copyOfout1_3.profit_center_name);
}

                            if(copyOfout1_3.etl_date != null) {
date_tDBOutput_12 = copyOfout1_3.etl_date.getTime();
if(date_tDBOutput_12 < year1_tDBOutput_12 || date_tDBOutput_12 >= year10000_tDBOutput_12) {
pstmt_tDBOutput_12.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_12.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_12));
}
} else {
pstmt_tDBOutput_12.setNull(3, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_12.addBatch();
                    nb_line_tDBOutput_12++;

                      batchSizeCounter_tDBOutput_12++;
                if ( batchSize_tDBOutput_12 <= batchSizeCounter_tDBOutput_12) {
                try {
                        int countSum_tDBOutput_12 = 0;
                        for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
                            countSum_tDBOutput_12 += (countEach_tDBOutput_12 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_12 = 0;
                    for(int countEach_tDBOutput_12: e.getUpdateCounts()) {
                        countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
                    }
                    insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_12 = 0;
            }
                commitCounter_tDBOutput_12++;

                if(commitEvery_tDBOutput_12 <= commitCounter_tDBOutput_12) {

                try {
                        int countSum_tDBOutput_12 = 0;
                        for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
                            countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_12 = 0;
                    for(int countEach_tDBOutput_12: e.getUpdateCounts()) {
                        countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
                    }
                    insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_12.commit();
                    commitCounter_tDBOutput_12=0;

                }


 


	tos_count_tDBOutput_12++;

/**
 * [tDBOutput_12 main ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_end ] stop
 */

} // End of branch "copyOfout1_3"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_12";

	

 



/**
 * [tRowGenerator_12 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_12 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_12";

	

}
globalMap.put("tRowGenerator_12_NB_LINE",nb_line_tRowGenerator_12);

 

ok_Hash.put("tRowGenerator_12", true);
end_Hash.put("tRowGenerator_12", System.currentTimeMillis());




/**
 * [tRowGenerator_12 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tDBOutput_12 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



                try {
                		if (batchSizeCounter_tDBOutput_12 != 0) {
							int countSum_tDBOutput_12 = 0;
							
							for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
								countSum_tDBOutput_12 += (countEach_tDBOutput_12 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_12 = 0;
					for(int countEach_tDBOutput_12: e.getUpdateCounts()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
					
            	    insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_12 = 0;
    		
	

        if(pstmt_tDBOutput_12 != null) {
			
				pstmt_tDBOutput_12.close();
				resourceMap.remove("pstmt_tDBOutput_12");
			
        }
    resourceMap.put("statementClosed_tDBOutput_12", true);
    	if (commitCounter_tDBOutput_12 > 0) {
    		
    		conn_tDBOutput_12.commit();
    		
    	}
    		
		
    	conn_tDBOutput_12 .close();
    	
    	resourceMap.put("finish_tDBOutput_12", true);
    	

	nb_line_deleted_tDBOutput_12=nb_line_deleted_tDBOutput_12+ deletedCount_tDBOutput_12;
	nb_line_update_tDBOutput_12=nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
	nb_line_inserted_tDBOutput_12=nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
	nb_line_rejected_tDBOutput_12=nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;
	
        globalMap.put("tDBOutput_12_NB_LINE",nb_line_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_UPDATED",nb_line_update_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_DELETED",nb_line_deleted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1_3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_12", true);
end_Hash.put("tDBOutput_12", System.currentTimeMillis());




/**
 * [tDBOutput_12 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_12 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_12";

	

 



/**
 * [tRowGenerator_12 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tDBOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
                if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_12")) != null) {
                    pstmtToClose_tDBOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_12") == null){
            java.sql.Connection ctn_tDBOutput_12 = null;
            if((ctn_tDBOutput_12 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_12")) != null){
                try {
                    ctn_tDBOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_12) {
                    String errorMessage_tDBOutput_12 = "failed to close the connection in tDBOutput_12 :" + sqlEx_tDBOutput_12.getMessage();
                    System.err.println(errorMessage_tDBOutput_12);
                }
            }
        }
    }
 



/**
 * [tDBOutput_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_12_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
		String properties_tDBConnection_1 = context.mysql_AdditionalParams;
		if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
			properties_tDBConnection_1 += "rewriteBatchedStatements=true";
		}else if (properties_tDBConnection_1 != null && !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
			properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
		}
		
		String url_tDBConnection_1 = "jdbc:mysql://" + context.mysql_Server + ":" + context.mysql_Port + "/" + context.mysql_Database + "?" + properties_tDBConnection_1;
		String dbUser_tDBConnection_1 = context.mysql_Login;
		
		
			
	final String decryptedPassword_tDBConnection_1 = context.mysql_Password; 
			String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
		
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);

	globalMap.put("db_tDBConnection_1",context.mysql_Database);
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final utils utilsClass = new utils();

        int exitCode = utilsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = utils.class.getClassLoader().getResourceAsStream("cont_etl/utils_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = utils.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("mysql_AdditionalParams", "id_String");
                            context.mysql_AdditionalParams=(String) context.getProperty("mysql_AdditionalParams");
                        context.setContextType("mysql_Login", "id_String");
                            context.mysql_Login=(String) context.getProperty("mysql_Login");
                        context.setContextType("mysql_Server", "id_String");
                            context.mysql_Server=(String) context.getProperty("mysql_Server");
                        context.setContextType("mysql_Port", "id_String");
                            context.mysql_Port=(String) context.getProperty("mysql_Port");
                        context.setContextType("mysql_Database", "id_String");
                            context.mysql_Database=(String) context.getProperty("mysql_Database");
                        context.setContextType("mysql_Password", "id_Password");
                            String pwd_mysql_Password_value = context.getProperty("mysql_Password");
                            context.mysql_Password = null;
                            if(pwd_mysql_Password_value!=null) {
                                if(context_param.containsKey("mysql_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.mysql_Password = pwd_mysql_Password_value;
                                } else if (!pwd_mysql_Password_value.isEmpty()) {
                                    try {
                                        context.mysql_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_mysql_Password_value);
                                        context.put("mysql_Password",context.mysql_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("mysql_AdditionalParams")) {
                context.mysql_AdditionalParams = (String) parentContextMap.get("mysql_AdditionalParams");
            }if (parentContextMap.containsKey("mysql_Login")) {
                context.mysql_Login = (String) parentContextMap.get("mysql_Login");
            }if (parentContextMap.containsKey("mysql_Server")) {
                context.mysql_Server = (String) parentContextMap.get("mysql_Server");
            }if (parentContextMap.containsKey("mysql_Port")) {
                context.mysql_Port = (String) parentContextMap.get("mysql_Port");
            }if (parentContextMap.containsKey("mysql_Database")) {
                context.mysql_Database = (String) parentContextMap.get("mysql_Database");
            }if (parentContextMap.containsKey("mysql_Password")) {
                context.mysql_Password = (java.lang.String) parentContextMap.get("mysql_Password");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("mysql_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRowGenerator_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRowGenerator_1) {
globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", -1);

e_tRowGenerator_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : utils");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     375345 characters generated by Talend Open Studio for Data Integration 
 *     on the December 8, 2019 7:19:19 PST PM
 ************************************************************************************************/